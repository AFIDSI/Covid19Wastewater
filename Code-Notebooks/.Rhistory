select(Date,CovRatio,CovRatioN1,CovRatioN2)
head(sumar1[order(sumar1$CovRatio,decreasing=T),],3)%>%
select(Date,CovRatio)
tail(sumar1[order(sumar1$CovRatio,decreasing=T),],3)%>%
select(Date,CovRatio)
head(sumar1[order(sumar1$CovRatioN1,decreasing=T),],3)%>%
select(Date,CovRatioN1)
tail(sumar1[order(sumar1$CovRatioN1,decreasing=T),],3)%>%
select(Date,CovRatioN1)
sumar1[order(sumar1$CovRatioN2,decreasing=T),]%>%
filter(!is.na(CovRatioN2))%>%
head(3)%>%
select(Date,CovRatioN2)
sumar1[order(sumar1$CovRatioN2,decreasing=T),]%>%
filter(!is.na(CovRatioN2))%>%
tail(3)%>%
select(Date,CovRatioN2)
summary(sumar1$CovRatio)
summary(sumar1$CovRatioN1)
summary(sumar1$CovRatioN2)
#CovRatio
#2021-02-01	0.1259527
#2020-11-09	0.1338029
#2020-11-30	3.4742086
#2021-02-04	7.9350253
#PMMoVRatio
#2020-12-15	2.95838995
#2020-12-22	2.66070456
#2020-11-16	0.08833492
#2021-02-08	0.06070667
water.rat=inner_join(sumar1,water,by = c("Date"))
water.rat%>%
ggplot()+aes(x=CovRatio,y=Conductivity)%>%
geom_point()
water.rat%>%
ggplot()+aes(x=CovRatioN1,y=CovRatioN2,color=CovRatio)%>%
geom_point()
water
water.bar=water%>%
filter(Site!="UW-LakeShore",Site!="UW-Sellery")%>%
mutate(SC2Mass=3.785*1000000*AVG*Total_Flow , PMMoVMass=3.785*1000000*PMMoV*Total_Flow)%>%
mutate(SC2MassN1=3.785*1000000*N1*Total_Flow , SC2MassN2=3.785*1000000*N2*Total_Flow)%>%
mutate(Date=as.character(Date))
water.NoComp=water.bar%>%
filter(Site!="Madison")
MadMass=water.bar%>%
filter(Site=="Madison")%>%
inner_join(data.frame(Date=SumInter$Date))%>%
select(Date,SC2Mass,PMMoVMass,SC2MassN1,SC2MassN2)
SumInter=water.bar%>%
filter(Site!="Madison")%>%
group_by(Date)%>%
summarize(sumPMMoV=sum(PMMoVMass),sumSC2=sum(SC2Mass),sumSC2N1=sum(SC2MassN1),sumSC2N2=sum(SC2MassN2))
ggplot() +
geom_bar(data=water.NoComp, aes(fill=Site, y=PMMoVMass, x=Date),position="stack", stat="identity")+
geom_errorbar(data=MadMass,aes(x=Date,ymin = 0, ymax = PMMoVMass))+
geom_point(data=MadMass,aes(x=Date,y=PMMoVMass),color="aquamarine1",size=2)+
theme(axis.text.x = element_text(angle = 90))+
ggtitle("PMMoV, 24-hr Mass Loading, MMSD, (gene copies per day)")+
ylab("Gene copies per Day")
minN1=0
maxN1=max(SumInter$sumSC2N1,na.rm=T)
myplots <- list()
myplots[[1]]=ggplot() +
geom_bar(data=water.NoComp, aes(fill=Site, y=SC2Mass, x=Date),position="stack", stat="identity")+
geom_errorbar(data=MadMass,aes(x=Date,ymin = 0, ymax = SC2Mass))+
geom_point(data=MadMass,aes(x=Date,y=SC2Mass),color="aquamarine1",size=2)+
scale_y_continuous(limits = c(minN1,maxN1))+
theme(axis.text.x = element_text(angle = 90))+
ggtitle("SARS-CoV-2, Avg, 24-hr Mass Loading, MMSD, (gene copies per day)")+
ylab("Gene copies per Day")
myplots[[2]]=ggplot() +
geom_bar(data=water.NoComp, aes(fill=Site, y=SC2MassN1, x=Date),position="stack", stat="identity")+
geom_errorbar(data=MadMass,aes(x=Date,ymin = 0, ymax = SC2MassN1))+
geom_point(data=MadMass,aes(x=Date,y=SC2MassN1),color="aquamarine1",size=2)+
scale_y_continuous(limits = c(minN1,maxN1))+
theme(axis.text.x = element_text(angle = 90))+
ggtitle("SARS-CoV-2, N1, 24-hr Mass Loading, MMSD")+
ylab("Gene copies per Day")
myplots[[3]]=ggplot() +
geom_bar(data=water.NoComp, aes(fill=Site, y=SC2MassN2, x=Date),position="stack", stat="identity")+
geom_errorbar(data=MadMass,aes(x=Date,ymin = 0, ymax = SC2MassN2))+
geom_point(data=MadMass,aes(x=Date,y=SC2MassN2),color="aquamarine1",size=2)+
scale_y_continuous(limits = c(minN1,maxN1))+
theme(axis.text.x = element_text(angle = 90))+
ggtitle("SARS-CoV-2,N2, 24-hr Mass Loading, MMSD")+
ylab("Gene copies per Day")
ggarrange(plotlist = myplots)
water
SumInter
water.bar=water%>%
filter(Site!="UW-LakeShore",Site!="UW-Sellery")%>%
mutate(SC2Mass=3.785*1000000*AVG*Total_Flow , PMMoVMass=3.785*1000000*PMMoV*Total_Flow)%>%
mutate(SC2MassN1=3.785*1000000*N1*Total_Flow , SC2MassN2=3.785*1000000*N2*Total_Flow)%>%
mutate(Date=as.character(Date))
water.NoComp=water.bar%>%
filter(Site!="Madison")
MadMass=water.bar%>%
filter(Site=="Madison")%>%
inner_join(data.frame(Date=SumInter$Date))%>%
select(Date,SC2Mass,PMMoVMass,SC2MassN1,SC2MassN2)
SumInter=water.bar%>%
filter(Site!="Madison")%>%
group_by(Date)%>%
summarize(sumPMMoV=sum(PMMoVMass),sumSC2=sum(SC2Mass),sumSC2N1=sum(SC2MassN1),sumSC2N2=sum(SC2MassN2))
ggplot() +
geom_bar(data=water.NoComp, aes(fill=Site, y=PMMoVMass, x=Date),position="stack", stat="identity")+
geom_errorbar(data=MadMass,aes(x=Date,ymin = 0, ymax = PMMoVMass))+
geom_point(data=MadMass,aes(x=Date,y=PMMoVMass),color="aquamarine1",size=2)+
theme(axis.text.x = element_text(angle = 90))+
ggtitle("PMMoV, 24-hr Mass Loading, MMSD, (gene copies per day)")+
ylab("Gene copies per Day")
minN1=0
maxN1=max(c(SumInter$sumSC2N1,na.rm=T,SumInter$sumSC2,na.rm=T))
myplots <- list()
myplots[[1]]=ggplot() +
geom_bar(data=water.NoComp, aes(fill=Site, y=SC2Mass, x=Date),position="stack", stat="identity")+
geom_errorbar(data=MadMass,aes(x=Date,ymin = 0, ymax = SC2Mass))+
geom_point(data=MadMass,aes(x=Date,y=SC2Mass),color="aquamarine1",size=2)+
scale_y_continuous(limits = c(minN1,maxN1))+
theme(axis.text.x = element_text(angle = 90))+
ggtitle("SARS-CoV-2, Avg, 24-hr Mass Loading, MMSD, (gene copies per day)")+
ylab("Gene copies per Day")
myplots[[2]]=ggplot() +
geom_bar(data=water.NoComp, aes(fill=Site, y=SC2MassN1, x=Date),position="stack", stat="identity")+
geom_errorbar(data=MadMass,aes(x=Date,ymin = 0, ymax = SC2MassN1))+
geom_point(data=MadMass,aes(x=Date,y=SC2MassN1),color="aquamarine1",size=2)+
scale_y_continuous(limits = c(minN1,maxN1))+
theme(axis.text.x = element_text(angle = 90))+
ggtitle("SARS-CoV-2, N1, 24-hr Mass Loading, MMSD")+
ylab("Gene copies per Day")
myplots[[3]]=ggplot() +
geom_bar(data=water.NoComp, aes(fill=Site, y=SC2MassN2, x=Date),position="stack", stat="identity")+
geom_errorbar(data=MadMass,aes(x=Date,ymin = 0, ymax = SC2MassN2))+
geom_point(data=MadMass,aes(x=Date,y=SC2MassN2),color="aquamarine1",size=2)+
scale_y_continuous(limits = c(minN1,maxN1))+
theme(axis.text.x = element_text(angle = 90))+
ggtitle("SARS-CoV-2,N2, 24-hr Mass Loading, MMSD")+
ylab("Gene copies per Day")
ggarrange(plotlist = myplots)
water
maxN1=max(c(SumInter$sumSC2N1,na.rm=T,SumInter$sumSC2,na.rm=T))
maxN1
c(SumInter$sumSC2N1,na.rm=T,SumInter$sumSC2,na.rm=T)
SumInter
water.bar=water%>%
filter(Site!="UW-LakeShore",Site!="UW-Sellery")%>%
mutate(SC2Mass=3.785*1000000*AVG*Total_Flow , PMMoVMass=3.785*1000000*PMMoV*Total_Flow)%>%
mutate(SC2MassN1=3.785*1000000*N1*Total_Flow , SC2MassN2=3.785*1000000*N2*Total_Flow)%>%
mutate(Date=as.character(Date))
water.NoComp=water.bar%>%
filter(Site!="Madison")
MadMass=water.bar%>%
filter(Site=="Madison")%>%
inner_join(data.frame(Date=SumInter$Date))%>%
select(Date,SC2Mass,PMMoVMass,SC2MassN1,SC2MassN2)
SumInter=water.bar%>%
filter(Site!="Madison")%>%
group_by(Date)%>%
summarize(sumPMMoV=sum(PMMoVMass),sumSC2=sum(SC2Mass),sumSC2N1=sum(SC2MassN1),sumSC2N2=sum(SC2MassN2))
ggplot() +
geom_bar(data=water.NoComp, aes(fill=Site, y=PMMoVMass, x=Date),position="stack", stat="identity")+
geom_errorbar(data=MadMass,aes(x=Date,ymin = 0, ymax = PMMoVMass))+
geom_point(data=MadMass,aes(x=Date,y=PMMoVMass),color="aquamarine1",size=2)+
theme(axis.text.x = element_text(angle = 90))+
ggtitle("PMMoV, 24-hr Mass Loading, MMSD, (gene copies per day)")+
ylab("Gene copies per Day")
minN1=0
maxN1=max(c(SumInter$sumSC2N1,na.rm=T,MadMass$SC2Mass,na.rm=T))
myplots <- list()
myplots[[1]]=ggplot() +
geom_bar(data=water.NoComp, aes(fill=Site, y=SC2Mass, x=Date),position="stack", stat="identity")+
geom_errorbar(data=MadMass,aes(x=Date,ymin = 0, ymax = SC2Mass))+
geom_point(data=MadMass,aes(x=Date,y=SC2Mass),color="aquamarine1",size=2)+
scale_y_continuous(limits = c(minN1,maxN1))+
theme(axis.text.x = element_text(angle = 90))+
ggtitle("SARS-CoV-2, Avg, 24-hr Mass Loading, MMSD, (gene copies per day)")+
ylab("Gene copies per Day")
myplots[[2]]=ggplot() +
geom_bar(data=water.NoComp, aes(fill=Site, y=SC2MassN1, x=Date),position="stack", stat="identity")+
geom_errorbar(data=MadMass,aes(x=Date,ymin = 0, ymax = SC2MassN1))+
geom_point(data=MadMass,aes(x=Date,y=SC2MassN1),color="aquamarine1",size=2)+
scale_y_continuous(limits = c(minN1,maxN1))+
theme(axis.text.x = element_text(angle = 90))+
ggtitle("SARS-CoV-2, N1, 24-hr Mass Loading, MMSD")+
ylab("Gene copies per Day")
myplots[[3]]=ggplot() +
geom_bar(data=water.NoComp, aes(fill=Site, y=SC2MassN2, x=Date),position="stack", stat="identity")+
geom_errorbar(data=MadMass,aes(x=Date,ymin = 0, ymax = SC2MassN2))+
geom_point(data=MadMass,aes(x=Date,y=SC2MassN2),color="aquamarine1",size=2)+
scale_y_continuous(limits = c(minN1,maxN1))+
theme(axis.text.x = element_text(angle = 90))+
ggtitle("SARS-CoV-2,N2, 24-hr Mass Loading, MMSD")+
ylab("Gene copies per Day")
ggarrange(plotlist = myplots)
water
#11-20 missing
#comp is everyday, interceptors are every two day, how? Look at only mad?
#20-25% have inconsistency, down to 10% when fit NA
#lack of tidy data means many duplicate values/book keeping errors
#for the paper is good we need good data
#some system to pick good values over others
maxN1
MadMass
water.bar=water%>%
filter(Site!="UW-LakeShore",Site!="UW-Sellery")%>%
mutate(SC2Mass=3.785*1000000*AVG*Total_Flow , PMMoVMass=3.785*1000000*PMMoV*Total_Flow)%>%
mutate(SC2MassN1=3.785*1000000*N1*Total_Flow , SC2MassN2=3.785*1000000*N2*Total_Flow)%>%
mutate(Date=as.character(Date))
water.NoComp=water.bar%>%
filter(Site!="Madison")
MadMass=water.bar%>%
filter(Site=="Madison")%>%
inner_join(data.frame(Date=SumInter$Date))%>%
select(Date,SC2Mass,PMMoVMass,SC2MassN1,SC2MassN2)
SumInter=water.bar%>%
filter(Site!="Madison")%>%
group_by(Date)%>%
summarize(sumPMMoV=sum(PMMoVMass),sumSC2=sum(SC2Mass),sumSC2N1=sum(SC2MassN1),sumSC2N2=sum(SC2MassN2))
ggplot() +
geom_bar(data=water.NoComp, aes(fill=Site, y=PMMoVMass, x=Date),position="stack", stat="identity")+
geom_errorbar(data=MadMass,aes(x=Date,ymin = 0, ymax = PMMoVMass))+
geom_point(data=MadMass,aes(x=Date,y=PMMoVMass),color="aquamarine1",size=2)+
theme(axis.text.x = element_text(angle = 90))+
ggtitle("PMMoV, 24-hr Mass Loading, MMSD, (gene copies per day)")+
ylab("Gene copies per Day")
minN1=0
maxN1=max(c(SumInter$sumSC2N1,na.rm=T,MadMass$SC2MassN1,na.rm=T))
myplots <- list()
myplots[[1]]=ggplot() +
geom_bar(data=water.NoComp, aes(fill=Site, y=SC2Mass, x=Date),position="stack", stat="identity")+
geom_errorbar(data=MadMass,aes(x=Date,ymin = 0, ymax = SC2Mass))+
geom_point(data=MadMass,aes(x=Date,y=SC2Mass),color="aquamarine1",size=2)+
scale_y_continuous(limits = c(minN1,maxN1))+
theme(axis.text.x = element_text(angle = 90))+
ggtitle("SARS-CoV-2, Avg, 24-hr Mass Loading, MMSD, (gene copies per day)")+
ylab("Gene copies per Day")
myplots[[2]]=ggplot() +
geom_bar(data=water.NoComp, aes(fill=Site, y=SC2MassN1, x=Date),position="stack", stat="identity")+
geom_errorbar(data=MadMass,aes(x=Date,ymin = 0, ymax = SC2MassN1))+
geom_point(data=MadMass,aes(x=Date,y=SC2MassN1),color="aquamarine1",size=2)+
scale_y_continuous(limits = c(minN1,maxN1))+
theme(axis.text.x = element_text(angle = 90))+
ggtitle("SARS-CoV-2, N1, 24-hr Mass Loading, MMSD")+
ylab("Gene copies per Day")
myplots[[3]]=ggplot() +
geom_bar(data=water.NoComp, aes(fill=Site, y=SC2MassN2, x=Date),position="stack", stat="identity")+
geom_errorbar(data=MadMass,aes(x=Date,ymin = 0, ymax = SC2MassN2))+
geom_point(data=MadMass,aes(x=Date,y=SC2MassN2),color="aquamarine1",size=2)+
scale_y_continuous(limits = c(minN1,maxN1))+
theme(axis.text.x = element_text(angle = 90))+
ggtitle("SARS-CoV-2,N2, 24-hr Mass Loading, MMSD")+
ylab("Gene copies per Day")
ggarrange(plotlist = myplots)
water
#11-20 missing
#comp is everyday, interceptors are every two day, how? Look at only mad?
#20-25% have inconsistency, down to 10% when fit NA
#lack of tidy data means many duplicate values/book keeping errors
#for the paper is good we need good data
#some system to pick good values over others
# Chunk 1
library(shiny)
library(ggpubr)
library(dplyr)
HFGData=read.csv("../../UntrackedData/HFG_mean_data.CSV", row.names = 1)%>%
mutate(Filter=as.character(Filter),Well=as.character(Well),Date=as.Date(Date))%>%
na.omit()
DateRange=data.frame(Date=seq(min(HFGData$Date), max(HFGData$Date), "days"))%>%
mutate(Days=weekdays(Date))%>%
filter(Days %in% c("Sunday","Monday"))
if (DateRange$Days[1]=="Monday"){
DateRange=DateRange[-1,]}
if (tail(DateRange$Days, n=1)=="Sunday"){
DateRange=head(DateRange, -1)}
MRan=filter(DateRange,Days=="Sunday")%>%
rename(Left=Date)
SRan=filter(DateRange,Days=="Monday")%>%
rename(Right=Date)
DateRangeD=cbind(MRan,SRan)%>%
select(Left,Right)
HFGDFrame=HFGData%>%
rename(`Filter replicates`=Filter)
#mutate(Is_W_end=weekdays(Date) %in% c("Sunday","Monday"))
myseed=1234567890
filter(HFGDFrame, HFGDFrame$name %in% c("N1GC","N2GC","PMMOVGC"))%>%
ggplot(aes(x=Date,y=value))+geom_point()+facet_grid(name~Plant)
# Chunk 2
#Creates buttons for Plant location,Line, and scale
ui <- fluidPage(
tags$style(type="text/css",
".shiny-output-error { visibility: hidden; }",
".shiny-output-error:before { visibility: hidden; }"
),
titlePanel("HFG Interactive graphic"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "Plant", label = ("Plant"),
choices = c("All",unique(HFGDFrame$Plant)),
multiple=F,
selected="Madison"),
selectInput(inputId = "Vars", label = ("Varibles"),
choices = c("N1GC","N2GC","PMMOVGC"),
multiple=T,
selected="N1GC"),
checkboxInput(inputId = "Line", label = ("Daily mean of 9 replicates"),
value=F),
checkboxInput(inputId = "Means", label = ("Mean of qPCR replicates"),
value=F),
selectInput(inputId = "scale", label = ("y scales"),
choices = c("log y scale","Normal scale"),
selected="log y scale"),
checkboxInput(inputId = "YLim", label = ("Appropriate Y limits"),
value=T)
#sliderInput(inputId = "YLim", label = "Shown Y Quintile",min = .9, max = 1,step=.005,value=1)
),
#creates panel
mainPanel(div("Pink sections are weekends"),br(),plotOutput("plot1",inline=TRUE), br(),div("Data source: HFG data for stats preliminary 3-18-21.xlsx from 3/18/2021 jocelyn.hemming@slh.wisc.edu email."),div("Questions? Contact Marlin Lee mrlee6@wisc.edu or Steve Goldstein sgoldstein@wisc.edu"))
)
)
# Chunk 3
#create graphic
server <- function(input, output) {
#reduces data to only Plant selected
filtered_data_P = reactive({
FilteredDF=filter(HFGDFrame, HFGDFrame$name %in% input$Vars)
if(input$Plant!="All")
FilteredDF=filter(FilteredDF, FilteredDF$Plant %in% input$Plant)
FilteredDF
})
filtered_data_N = reactive({
filter(filtered_data_P(),Type=="Normal")
})
#Data of the means of each day
Data_mean_var = reactive({
filter(filtered_data_P(),Type=="Plant Mean")
})
Filter_mean_var = reactive({
filter(filtered_data_P(),Type=="Filter Mean")
})
DF_Week = reactive({
return(DateRangeD)
})
output$plot1<-renderPlot(
width = function() 800*ifelse(input$Plant=="All",10,1),
height = function() 100+550*length(input$Vars),
{
set.seed(myseed)
HFGDPlot=ggplot()+aes(y=value,x=Date)
HFGDPlot = HFGDPlot + geom_jitter(data=filtered_data_N(),aes(color=`Filter replicates`),alpha=.7,height=0,width=.1,size=3)
if(input$Line==T){
HFGDPlot=HFGDPlot+geom_line(data=Data_mean_var(),size=1)
}
if(input$Means==T){
set.seed(myseed)
HFGDPlot=HFGDPlot+geom_jitter(data=Filter_mean_var(),aes(fill=`Filter replicates`), shape=23, size=5, height=0, width=.1)
}
HFGDPlot = HFGDPlot+facet_grid(name~Plant,strip.position="left")
low=0
if(input$scale=="log y scale"){
HFGDPlot = HFGDPlot + scale_y_log10()#+coord_cartesian(ylim=c(minVal, quint))
low=0
}
else{
HFGDPlot=HFGDPlot#+coord_cartesian(ylim=c(minVal, quint))
low=1}
HFGDPlot = HFGDPlot#+geom_rect(data=DF_Week, aes(xmin=Left, xmax=Right, ymin=low, ymax=Inf), fill='pink', alpha=.2,inherit.aes=FALSE)
return(HFGDPlot)
})
#plots N1GC
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggpubr)
library(dplyr)
HFGData=read.csv("../../UntrackedData/HFG_mean_data.CSV", row.names = 1)%>%
mutate(Filter=as.character(Filter),Well=as.character(Well),Date=as.Date(Date))%>%
na.omit()
DateRange=data.frame(Date=seq(min(HFGData$Date), max(HFGData$Date), "days"))%>%
mutate(Days=weekdays(Date))%>%
filter(Days %in% c("Sunday","Monday"))
if (DateRange$Days[1]=="Monday"){
DateRange=DateRange[-1,]}
if (tail(DateRange$Days, n=1)=="Sunday"){
DateRange=head(DateRange, -1)}
MRan=filter(DateRange,Days=="Sunday")%>%
rename(Left=Date)
SRan=filter(DateRange,Days=="Monday")%>%
rename(Right=Date)
DateRangeD=cbind(MRan,SRan)%>%
select(Left,Right)
HFGDFrame=HFGData%>%
rename(`Filter replicates`=Filter)
#mutate(Is_W_end=weekdays(Date) %in% c("Sunday","Monday"))
myseed=1234567890
filter(HFGDFrame, HFGDFrame$name %in% c("N1GC","N2GC","PMMOVGC"))%>%
ggplot(aes(x=Date,y=value))+geom_point()+facet_grid(name~Plant)
library(shiny)
library(ggpubr)
library(dplyr)
HFGData=read.csv("../../UntrackedData/HFG_mean_data.CSV", row.names = 1)%>%
mutate(Filter=as.character(Filter),Well=as.character(Well),Date=as.Date(Date))%>%
na.omit()
setwd("C:/Users/Marlin/Desktop/COVID-19_WastewaterAnalysis/COVID-19_WastewaterAnalysis/Code-Notebooks")
library(shiny)
library(ggpubr)
library(dplyr)
HFGData=read.csv("../../UntrackedData/HFG_mean_data.CSV", row.names = 1)%>%
mutate(Filter=as.character(Filter),Well=as.character(Well),Date=as.Date(Date))%>%
na.omit()
DateRange=data.frame(Date=seq(min(HFGData$Date), max(HFGData$Date), "days"))%>%
mutate(Days=weekdays(Date))%>%
filter(Days %in% c("Sunday","Monday"))
if (DateRange$Days[1]=="Monday"){
DateRange=DateRange[-1,]}
if (tail(DateRange$Days, n=1)=="Sunday"){
DateRange=head(DateRange, -1)}
MRan=filter(DateRange,Days=="Sunday")%>%
rename(Left=Date)
SRan=filter(DateRange,Days=="Monday")%>%
rename(Right=Date)
DateRangeD=cbind(MRan,SRan)%>%
select(Left,Right)
HFGDFrame=HFGData%>%
rename(`Filter replicates`=Filter)
#mutate(Is_W_end=weekdays(Date) %in% c("Sunday","Monday"))
myseed=1234567890
filter(HFGDFrame, HFGDFrame$name %in% c("N1GC","N2GC","PMMOVGC"))%>%
ggplot(aes(x=Date,y=value))+geom_point()+facet_grid(name~Plant)
#Creates buttons for Plant location,Line, and scale
ui <- fluidPage(
tags$style(type="text/css",
".shiny-output-error { visibility: hidden; }",
".shiny-output-error:before { visibility: hidden; }"
),
titlePanel("HFG Interactive graphic"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "Plant", label = ("Plant"),
choices = c("All",unique(HFGDFrame$Plant)),
multiple=F,
selected="Madison"),
selectInput(inputId = "Vars", label = ("Varibles"),
choices = c("N1GC","N2GC","PMMOVGC"),
multiple=T,
selected="N1GC"),
checkboxInput(inputId = "Line", label = ("Daily mean of 9 replicates"),
value=F),
checkboxInput(inputId = "Means", label = ("Mean of qPCR replicates"),
value=F),
selectInput(inputId = "scale", label = ("y scales"),
choices = c("log y scale","Normal scale"),
selected="log y scale"),
checkboxInput(inputId = "YLim", label = ("Appropriate Y limits"),
value=T)
#sliderInput(inputId = "YLim", label = "Shown Y Quintile",min = .9, max = 1,step=.005,value=1)
),
#creates panel
mainPanel(div("Pink sections are weekends"),br(),plotOutput("plot1",inline=TRUE), br(),div("Data source: HFG data for stats preliminary 3-18-21.xlsx from 3/18/2021 jocelyn.hemming@slh.wisc.edu email."),div("Questions? Contact Marlin Lee mrlee6@wisc.edu or Steve Goldstein sgoldstein@wisc.edu"))
)
)
#create graphic
server <- function(input, output) {
#reduces data to only Plant selected
filtered_data_P = reactive({
FilteredDF=filter(HFGDFrame, HFGDFrame$name %in% input$Vars)
if(input$Plant!="All")
FilteredDF=filter(FilteredDF, FilteredDF$Plant %in% input$Plant)
FilteredDF
})
filtered_data_N = reactive({
filter(filtered_data_P(),Type=="Normal")
})
#Data of the means of each day
Data_mean_var = reactive({
filter(filtered_data_P(),Type=="Plant Mean")
})
Filter_mean_var = reactive({
filter(filtered_data_P(),Type=="Filter Mean")
})
DF_Week = reactive({
return(DateRangeD)
})
output$plot1<-renderPlot(
width = function() 800*ifelse(input$Plant=="All",10,1),
height = function() 100+550*length(input$Vars),
{
set.seed(myseed)
HFGDPlot=ggplot()+aes(y=value,x=Date)
HFGDPlot = HFGDPlot + geom_jitter(data=filtered_data_N(),aes(color=`Filter replicates`),alpha=.7,height=0,width=.1,size=3)
if(input$Line==T){
HFGDPlot=HFGDPlot+geom_line(data=Data_mean_var(),size=1)
}
if(input$Means==T){
set.seed(myseed)
HFGDPlot=HFGDPlot+geom_jitter(data=Filter_mean_var(),aes(fill=`Filter replicates`), shape=23, size=5, height=0, width=.1)
}
HFGDPlot = HFGDPlot+facet_grid(name~Plant,strip.position="left")
low=0
if(input$scale=="log y scale"){
HFGDPlot = HFGDPlot + scale_y_log10()#+coord_cartesian(ylim=c(minVal, quint))
low=0
}
else{
HFGDPlot=HFGDPlot#+coord_cartesian(ylim=c(minVal, quint))
low=1}
HFGDPlot = HFGDPlot#+geom_rect(data=DF_Week, aes(xmin=Left, xmax=Right, ymin=low, ymax=Inf), fill='pink', alpha=.2,inherit.aes=FALSE)
return(HFGDPlot)
})
#plots N1GC
}
shinyApp(ui = ui, server = server)
