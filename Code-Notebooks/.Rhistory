if(FirstDif){
PlotingTS[[2]] <- diff(PlotingTS[[2]])
PlotingTS[[1]] <- diff(PlotingTS[[1]])
Lab <- paste("Cross correlation of the First Diffrence of", DepName, "and", IndName)
}else{
Lab <- paste("Cross correlation of", DepName, "and", IndName)
}
par(mar = c(5, 4, 4, 4) + 0.3)
if(FullPlot){
plot.ts(rollmean(exp(PlotingTS[[4]]), 7,align="right",fill = NA),
col = "steelblue3",
main=Lab,
sub=SubTitle,
ylab = "N1 (GC/L)",log = 'y',xaxt = "n")
par(new = TRUE)
plot.ts(rollmean(PlotingTS[[3]], 7,align="right",fill = NA),
col = "hotpink",
axes = FALSE, xlab = "", ylab = "",xaxt = "n")
par(new = TRUE)
plot.ts(exp(PlotingTS[[2]]),
col = "blue",
axes = FALSE,
xlab = "",
ylab = "",
log = 'y',xaxt = "n")
}else{
plot.ts(PlotingTS[[2]],
col = "blue",
ylab = "N1 (GC/L)",
main=Lab,
sub=SubTitle,
xaxt = "n")
}
par(new = TRUE)
plot.ts(PlotingTS[[1]], col = "red",
axes = FALSE, xlab = "", ylab = "",xaxt = "n")
axis(side = 4, at = pretty(range(PlotingTS[[1]])))
mtext("Cases", side = 4, line = 3)
if(FullPlot){
legendNames <- c("SLD Cases","7 MA Cases","Loess Smoothing","7 MA N1")
legendColors <- c("red","hotpink","blue", "steelblue3")
}else{
legendNames<- c("SLD Cases","Loess Smoothing")
legendColors<- c("red","blue")
}
legend("topright", legend=legendNames, col=legendColors, lty=1, cex=.75)
axis(1,
pretty(SourceDF$Date),labels =format(pretty(SourceDF$Date), "%Y-%m-%d"))
#pretty(format(SourceDF$Date, "%Y-%m-%d")))
}
SLDGraphics <- function(SiteS,DepTSVec,IndTSVec,DepName,IndName,efficient=FALSE){
TSPloting(list(DepTSVec,IndTSVec),MergedDF,DepName,IndName,
FullPlot=FALSE,SubTitle=SiteS)
TSPloting(list(DepTSVec,IndTSVec),MergedDF,DepName,IndName,
FullPlot=FALSE,SubTitle=SiteS,FirstDif=TRUE)
# TSPloting(list(SLDCaseVec,loessN1Vec,CaseVec,logN1Vec),MergedDF,SubTitle=SiteS)
#
# TSPloting(list(diff(DepTSVec,Diffs),diff(IndTSVec,Diffs)),MergedDF,
#           FullPlot=FALSE,SubTitle=SiteS)
CCFVec <- ccf(IndTSVec,DepTSVec,
main=paste("CC between",IndName,"and", DepName),
sub=SiteS)
OffSet <- which(CCFVec[[1]]==max(CCFVec[[1]]))-21
# TSUnionDF2 <- ts.intersect(DepTSVec,
#                       OGVec = stats::lag(IndTSVec,OffSet))
# OLM2 <- lm(TSUnionDF2[,1]~TSUnionDF2[,2])
# print(summary(OLM2))
# ggtsdisplay(residuals(OLM2))
# FM2 <- auto.arima(TSUnionDF2[,1],xreg=TSUnionDF2[,2])
# ggtsdisplay(residuals(FM2))
# print(summary(FM2))
preWhiteFit <- auto.arima(IndTSVec, seasonal=FALSE,
stepwise=FALSE, approximation=FALSE)
IndResid <- IndTSVec - fitted(Arima(IndTSVec, model = preWhiteFit))
DepResid <- DepTSVec - fitted(Arima(DepTSVec, model = preWhiteFit))
CCFVecPre <- ccf(IndResid, DepResid,lag.max=22,
main=paste("prewhiten CC between",IndName,"and", DepName),
sub=SiteS)
OffSetWhit <- which(CCFVecPre[[1]]==max(CCFVecPre[[1]]))-21
if(max(CCFVecPre[[1]])<.15){
print("no signifigent prewhitened relationship")
OffSetWhit <- OffSet
}
print(paste("using offset of", OffSetWhit))
TSUnionDF <- ts.intersect(DepTSVec,
OGVec = stats::lag(IndTSVec,OffSetWhit))
TSPloting(list(TSUnionDF[,1],TSUnionDF[,2]),MergedDF,DepName,IndName,
FullPlot=FALSE,SubTitle=SiteS)
TSPloting(list(TSUnionDF[,1],TSUnionDF[,2]),MergedDF,DepName,IndName,
FullPlot=FALSE,SubTitle=SiteS,FirstDif=TRUE)
OLM <- lm(TSUnionDF[,1]~TSUnionDF[,2])
print(summary(OLM))
ggtsdisplay(residuals(OLM))
FM <- auto.arima(TSUnionDF[,1],xreg=TSUnionDF[,2])
#FM <- cochrane.orcutt(OLM,max.iter=1000)
ggtsdisplay(residuals(FM))
print(summary(FM))
return(FM)
}
FullMadLimsDF <- DataPrep(LIMSFullDF,"N1","Madison")
SmoothCasePlotDF <- DFSmoothingFNC(FullCase,SiteS="Madison")%>%
mutate(Site="Madison")#%>%
#filter(!is.na(Cases2))
MergedDF <- inner_join(SmoothCasePlotDF,FullMadLimsDF, by=c("Date","Site"))
MergedDF$LoessN1 <- DFLoessFNC(MergedDF,SiteS="Madison")
TSDF <- ts(MergedDF,start = 18520)
SLDCaseVec <- TSDF[,4]
CaseVec <- TSDF[,2]
loessN1Vec <- TSDF[,6]
logN1Vec <- log(TSDF[,5])
SLDModelMad <- SLDGraphics("Madison",SLDCaseVec,loessN1Vec,"SLD","Loess")
SLDGraphics <- function(SiteS,DepTSVec,IndTSVec,DepName,IndName,efficient=FALSE){
Print("Visual Relationship")
TSPloting(list(DepTSVec,IndTSVec),MergedDF,DepName,IndName,
FullPlot=FALSE,SubTitle=SiteS)
TSPloting(list(DepTSVec,IndTSVec),MergedDF,DepName,IndName,
FullPlot=FALSE,SubTitle=SiteS,FirstDif=TRUE)
CCFVec <- ccf(IndTSVec,DepTSVec,
main=paste("CC between",IndName,"and", DepName),
sub=SiteS)
OffSet <- which(CCFVec[[1]]==max(CCFVec[[1]]))-21 #Best offset of Straight ccf
preWhiteFit <- auto.arima(IndTSVec, seasonal=FALSE,
stepwise=FALSE, approximation=FALSE) #underlying arima trend of Ind
IndResid <- IndTSVec - fitted(Arima(IndTSVec, model = preWhiteFit))
DepResid <- DepTSVec - fitted(Arima(DepTSVec, model = preWhiteFit))
CCFVecPre <- ccf(IndResid, DepResid,lag.max=22,
main=paste("prewhiten CC between",IndName,"and", DepName),
sub=SiteS) #CC removing Arima relationship of Ind
OffSetWhit <- which(CCFVecPre[[1]]==max(CCFVecPre[[1]]))-21#Best offset of PreWhite ccf
if(max(CCFVecPre[[1]])<.15){ #If no prewhite corr is significant then use straight ccf
print("no signifigent prewhitened relationship")
OffSetWhit <- OffSet
}
print(paste("using offset of", OffSetWhit))
TSUnionDF <- ts.intersect(DepTSVec,
OGVec = stats::lag(IndTSVec,OffSetWhit))
Print("Visual Relationship with offset")
TSPloting(list(TSUnionDF[,1],TSUnionDF[,2]),MergedDF,DepName,IndName,
FullPlot=FALSE,SubTitle=SiteS)
TSPloting(list(TSUnionDF[,1],TSUnionDF[,2]),MergedDF,DepName,IndName,
FullPlot=FALSE,SubTitle=SiteS,FirstDif=TRUE)
OLM <- lm(TSUnionDF[,1]~TSUnionDF[,2])
print("Ordinary LM")
print(summary(OLM))
ggtsdisplay(residuals(OLM))
FM <- auto.arima(TSUnionDF[,1],xreg=TSUnionDF[,2])
#FM <- cochrane.orcutt(OLM,max.iter=1000)
print("LM with Arima residuals")
ggtsdisplay(residuals(FM))
print(summary(FM))
return(FM)
}
FullMadLimsDF <- DataPrep(LIMSFullDF,"N1","Madison")
SmoothCasePlotDF <- DFSmoothingFNC(FullCase,SiteS="Madison")%>%
mutate(Site="Madison")#%>%
#filter(!is.na(Cases2))
MergedDF <- inner_join(SmoothCasePlotDF,FullMadLimsDF, by=c("Date","Site"))
MergedDF$LoessN1 <- DFLoessFNC(MergedDF,SiteS="Madison")
TSDF <- ts(MergedDF,start = 18520)
SLDCaseVec <- TSDF[,4]
CaseVec <- TSDF[,2]
loessN1Vec <- TSDF[,6]
logN1Vec <- log(TSDF[,5])
SLDModelMad <- SLDGraphics("Madison",SLDCaseVec,loessN1Vec,"SLD","Loess")
SLDGraphics <- function(SiteS,DepTSVec,IndTSVec,DepName,IndName,efficient=FALSE){
print("Visual Relationship")
TSPloting(list(DepTSVec,IndTSVec),MergedDF,DepName,IndName,
FullPlot=FALSE,SubTitle=SiteS)
TSPloting(list(DepTSVec,IndTSVec),MergedDF,DepName,IndName,
FullPlot=FALSE,SubTitle=SiteS,FirstDif=TRUE)
CCFVec <- ccf(IndTSVec,DepTSVec,
main=paste("CC between",IndName,"and", DepName),
sub=SiteS)
OffSet <- which(CCFVec[[1]]==max(CCFVec[[1]]))-21 #Best offset of Straight ccf
preWhiteFit <- auto.arima(IndTSVec, seasonal=FALSE,
stepwise=FALSE, approximation=FALSE) #underlying arima trend of Ind
IndResid <- IndTSVec - fitted(Arima(IndTSVec, model = preWhiteFit))
DepResid <- DepTSVec - fitted(Arima(DepTSVec, model = preWhiteFit))
CCFVecPre <- ccf(IndResid, DepResid,lag.max=22,
main=paste("prewhiten CC between",IndName,"and", DepName),
sub=SiteS) #CC removing Arima relationship of Ind
OffSetWhit <- which(CCFVecPre[[1]]==max(CCFVecPre[[1]]))-21#Best offset of PreWhite ccf
if(max(CCFVecPre[[1]])<.15){ #If no prewhite corr is significant then use straight ccf
print("no signifigent prewhitened relationship")
OffSetWhit <- OffSet
}
print(paste("using offset of", OffSetWhit))
TSUnionDF <- ts.intersect(DepTSVec,
OGVec = stats::lag(IndTSVec,OffSetWhit))
Print("Visual Relationship with offset")
TSPloting(list(TSUnionDF[,1],TSUnionDF[,2]),MergedDF,DepName,IndName,
FullPlot=FALSE,SubTitle=SiteS)
TSPloting(list(TSUnionDF[,1],TSUnionDF[,2]),MergedDF,DepName,IndName,
FullPlot=FALSE,SubTitle=SiteS,FirstDif=TRUE)
OLM <- lm(TSUnionDF[,1]~TSUnionDF[,2])
print("Ordinary LM")
print(summary(OLM))
ggtsdisplay(residuals(OLM))
FM <- auto.arima(TSUnionDF[,1],xreg=TSUnionDF[,2])
#FM <- cochrane.orcutt(OLM,max.iter=1000)
print("LM with Arima residuals")
ggtsdisplay(residuals(FM))
print(summary(FM))
return(FM)
}
FullMadLimsDF <- DataPrep(LIMSFullDF,"N1","Madison")
SmoothCasePlotDF <- DFSmoothingFNC(FullCase,SiteS="Madison")%>%
mutate(Site="Madison")#%>%
#filter(!is.na(Cases2))
MergedDF <- inner_join(SmoothCasePlotDF,FullMadLimsDF, by=c("Date","Site"))
MergedDF$LoessN1 <- DFLoessFNC(MergedDF,SiteS="Madison")
TSDF <- ts(MergedDF,start = 18520)
SLDCaseVec <- TSDF[,4]
CaseVec <- TSDF[,2]
loessN1Vec <- TSDF[,6]
logN1Vec <- log(TSDF[,5])
SLDModelMad <- SLDGraphics("Madison",SLDCaseVec,loessN1Vec,"SLD","Loess")
SLDGraphics <- function(SiteS,DepTSVec,IndTSVec,DepName,IndName,efficient=FALSE){
print("Visual Relationship")
TSPloting(list(DepTSVec,IndTSVec),MergedDF,DepName,IndName,
FullPlot=FALSE,SubTitle=SiteS)
TSPloting(list(DepTSVec,IndTSVec),MergedDF,DepName,IndName,
FullPlot=FALSE,SubTitle=SiteS,FirstDif=TRUE)
CCFVec <- ccf(IndTSVec,DepTSVec,
main=paste("CC between",IndName,"and", DepName),
sub=SiteS)
OffSet <- which(CCFVec[[1]]==max(CCFVec[[1]]))-21 #Best offset of Straight ccf
preWhiteFit <- auto.arima(IndTSVec, seasonal=FALSE,
stepwise=FALSE, approximation=FALSE) #underlying arima trend of Ind
IndResid <- IndTSVec - fitted(Arima(IndTSVec, model = preWhiteFit))
DepResid <- DepTSVec - fitted(Arima(DepTSVec, model = preWhiteFit))
CCFVecPre <- ccf(IndResid, DepResid,lag.max=22,
main=paste("prewhiten CC between",IndName,"and", DepName),
sub=SiteS) #CC removing Arima relationship of Ind
OffSetWhit <- which(CCFVecPre[[1]]==max(CCFVecPre[[1]]))-21#Best offset of PreWhite ccf
if(max(CCFVecPre[[1]])<.15){ #If no prewhite corr is significant then use straight ccf
print("no signifigent prewhitened relationship")
OffSetWhit <- OffSet
}
print(paste("using offset of", OffSetWhit))
TSUnionDF <- ts.intersect(DepTSVec,
OGVec = stats::lag(IndTSVec,OffSetWhit))
print("Visual Relationship with offset")
TSPloting(list(TSUnionDF[,1],TSUnionDF[,2]),MergedDF,DepName,IndName,
FullPlot=FALSE,SubTitle=SiteS)
TSPloting(list(TSUnionDF[,1],TSUnionDF[,2]),MergedDF,DepName,IndName,
FullPlot=FALSE,SubTitle=SiteS,FirstDif=TRUE)
OLM <- lm(TSUnionDF[,1]~TSUnionDF[,2])
print("Ordinary LM")
print(summary(OLM))
ggtsdisplay(residuals(OLM))
FM <- auto.arima(TSUnionDF[,1],xreg=TSUnionDF[,2])
#FM <- cochrane.orcutt(OLM,max.iter=1000)
print("LM with Arima residuals")
ggtsdisplay(residuals(FM))
print(summary(FM))
return(FM)
}
FullMadLimsDF <- DataPrep(LIMSFullDF,"N1","Madison")
SmoothCasePlotDF <- DFSmoothingFNC(FullCase,SiteS="Madison")%>%
mutate(Site="Madison")#%>%
#filter(!is.na(Cases2))
MergedDF <- inner_join(SmoothCasePlotDF,FullMadLimsDF, by=c("Date","Site"))
MergedDF$LoessN1 <- DFLoessFNC(MergedDF,SiteS="Madison")
TSDF <- ts(MergedDF,start = 18520)
SLDCaseVec <- TSDF[,4]
CaseVec <- TSDF[,2]
loessN1Vec <- TSDF[,6]
logN1Vec <- log(TSDF[,5])
SLDModelMad <- SLDGraphics("Madison",SLDCaseVec,loessN1Vec,"SLD","Loess")
SLDModelMad <- SLDGraphics("Madison",SLDCaseVec,loessN1Vec,"SLD","Loess")
# colnames(XReg) <- -10:10
# MainDriver <- ts.intersect(XReg,SLDTS)
# (fit1 <- auto.arima(MainDriver[,22], xreg=MainDriver[,1:21]))
# (fit1 <- auto.arima(MainDriver[,22], xreg=MainDriver[,1:11]))
# (fit1 <- auto.arima(MainDriver[,22], xreg=MainDriver[,11:21]))
# (fit1 <- auto.arima(MainDriver[,22], xreg=MainDriver[,15:18]))
# (fit1 <- auto.arima(MainDriver[,22], xreg=MainDriver[,16:18]))
#
# (fit <- auto.arima(MainDriver[,22], xreg=MainDriver[,15:18]))
# summary(fit)
library(TSA)
?arimax
#library(TSA)
arimax(SLDCaseVec,order=c(2,1,0),xreg=loessN1Vec)
#library(TSA)
arimax(SLDCaseVec,order=c(2,1,0),xreg=loessN1Vec)
SLDModelMad <- SLDGraphics("Madison",SLDCaseVec,loessN1Vec,"SLD","Loess")
SLDModelMad <- SLDGraphics("Madison",SLDCaseVec,loessN1Vec,"SLD","Loess")
SLDModelMad <- SLDGraphics("Madison",SLDCaseVec,logN1Vec,"SLD","log(N1)")
#ggplot latex? subscripts p_slope
DecayPlot <- function(Var,DF,Locate=c(18729,-40,45,14)){
GraphPlot <- DF%>%
mutate(Filter.Replicate=substr(Filter.Replicate,4,6))%>%
ggplot()+
aes(x=FilteredDate,y=!!sym(Var),color = Filter.Replicate)+
geom_label(inherit.aes=FALSE,
aes(x = as.Date(Locate[1]-Locate[4]*abs(as.numeric(as.factor(WWTP))-2)),
y = Locate[2]+Locate[3]*as.numeric(as.factor(Filter.Replicate)),
color=Filter.Replicate,
label=paste("p[slope]","==",  PVal)),
size=4,
show.legend = FALSE,
parse = TRUE,
data=regressions_data(Var,DF))+
geom_jitter(width = .2)+
geom_smooth(method = "lm", se=FALSE)+
scale_y_log10()+
labs(x="Filtered Date",y=Var,color="Filter Replicate")+
facet_wrap(~WWTP,nrow=3)
return(GraphPlot)
}
DecayPlot("N2.GC.L",SigDecayDF)+
ggtitle("Independent analysis for each filter rep")
#
MixedEffectModelSum <- function(DF,Var){
MixedEffectModel <- lmer(as.formula(paste0("log(",Var,") ~ TimePassed +   (1|WWTP:Filter.Replicate)")),
data = DF)
summary(MixedEffectModel)
}
MixedEffectModelPlot <- function(DF,Var,Title,subtitle,Log=TRUE){
if(Log){
Var2=paste0("log(",Var,")")
}else{
Var2=Var
}
DF2 <- DF%>%
filter(!!sym(Var)!=0)
MixedEffectModel <- lmer(as.formula(paste0(Var2," ~ TimePassed +   (1|WWTP:Filter.Replicate)")),
data = DF2)
DF3 <- DF2%>%
filter(!is.na(!!sym(Var)))
Temp <- signif(summary(MixedEffectModel)$coefficients[10],4)
DF3$Pred = exp(predict(MixedEffectModel))
DF3%>%
mutate(Filter.Replicate=substr(Filter.Replicate,4,6))%>%
ggplot()+
geom_jitter(aes(x=FilteredDate,y=!!sym(Var),color=Filter.Replicate,alpha=as.character(Temp)),width = .2)+
geom_line(aes(x=FilteredDate,y=Pred,color=Filter.Replicate))+
facet_wrap(~WWTP,nrow = 3)+
scale_y_log10()+
labs(y=Var,
x="Filtered Date",
color = "Filter Replicate",
title=Title,
subtitle=subtitle)+
scale_alpha_manual(values=c(1),labels = c(Temp),name=expression(p[slope]),guide = 'legend')
}
regressions_data <- function(Var,DF){
DF%>%
mutate(Filter.Replicate=substr(Filter.Replicate,4,6))%>%
group_by(WWTP,Filter.Replicate)%>%
summarise(PVal=signif(summary(lm(!!sym(Var)~TimePassed))$coefficients[8], digits = 3))
}
#ggplot latex? subscripts p_slope
DecayPlot <- function(Var,DF,Locate=c(18729,-40,45,14)){
GraphPlot <- DF%>%
mutate(Filter.Replicate=substr(Filter.Replicate,4,6))%>%
ggplot()+
aes(x=FilteredDate,y=!!sym(Var),color = Filter.Replicate)+
geom_label(inherit.aes=FALSE,
aes(x = as.Date(Locate[1]-Locate[4]*abs(as.numeric(as.factor(WWTP))-2)),
y = Locate[2]+Locate[3]*as.numeric(as.factor(Filter.Replicate)),
color=Filter.Replicate,
label=paste("p[slope]","==",  PVal)),
size=4,
show.legend = FALSE,
parse = TRUE,
data=regressions_data(Var,DF))+
geom_jitter(width = .2)+
geom_smooth(method = "lm", se=FALSE)+
scale_y_log10()+
labs(x="Filtered Date",y=Var,color="Filter Replicate")+
facet_wrap(~WWTP,nrow=3)
return(GraphPlot)
}
DecayPlot("N1.GC.L",SigDecayDF)+
ggtitle("Independent analysis for each filter rep")
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
library(ggpubr)
library(tidyverse)
library(forecast)
library(lmtest)
library(lubridate)
library(lme4)
library(lmerTest)
#Data Files and prep work
source("../Scripts/GenPlotMaking.R")
source("../Scripts/WasteWaterDataProccess.R")
source("../Scripts/CassesDataProccess.R")
source("../Scripts/HelperFunctions.R")
PathStarter="Z:/"
SigWasteFN <- paste0(PathStarter,
"COVID-19_WastewaterAnalysis/data/raw/TimeSeriesDataforStats072321.csv")
SigDecayDF <- read.csv(SigWasteFN)%>%
rename(collectionDate = Collection.Date,
FilteredDate = Filtered.Date)%>%
mutate(collectionDate = mdy(collectionDate),
FilteredDate = mdy(FilteredDate),
TimePassed = FilteredDate-collectionDate,
N1.CT = as.numeric(N1.CT))
#
MixedEffectModelSum <- function(DF,Var){
MixedEffectModel <- lmer(as.formula(paste0("log(",Var,") ~ TimePassed +   (1|WWTP:Filter.Replicate)")),
data = DF)
summary(MixedEffectModel)
}
MixedEffectModelPlot <- function(DF,Var,Title,subtitle,Log=TRUE){
if(Log){
Var2=paste0("log(",Var,")")
}else{
Var2=Var
}
DF2 <- DF%>%
filter(!!sym(Var)!=0)
MixedEffectModel <- lmer(as.formula(paste0(Var2," ~ TimePassed +   (1|WWTP:Filter.Replicate)")),
data = DF2)
DF3 <- DF2%>%
filter(!is.na(!!sym(Var)))
Temp <- signif(summary(MixedEffectModel)$coefficients[10],4)
DF3$Pred = exp(predict(MixedEffectModel))
DF3%>%
mutate(Filter.Replicate=substr(Filter.Replicate,4,6))%>%
ggplot()+
geom_jitter(aes(x=FilteredDate,y=!!sym(Var),color=Filter.Replicate,alpha=as.character(Temp)),width = .2)+
geom_line(aes(x=FilteredDate,y=Pred,color=Filter.Replicate))+
facet_wrap(~WWTP,nrow = 3)+
scale_y_log10()+
labs(y=Var,
x="Filtered Date",
color = "Filter Replicate",
title=Title,
subtitle=subtitle)+
scale_alpha_manual(values=c(1),labels = c(Temp),name=expression(p[slope]),guide = 'legend')
}
regressions_data <- function(Var,DF){
DF%>%
mutate(Filter.Replicate=substr(Filter.Replicate,4,6))%>%
group_by(WWTP,Filter.Replicate)%>%
summarise(PVal=signif(summary(lm(!!sym(Var)~TimePassed))$coefficients[8], digits = 3))
}
#ggplot latex? subscripts p_slope
DecayPlot <- function(Var,DF,Locate=c(18729,-40,45,14)){
GraphPlot <- DF%>%
mutate(Filter.Replicate=substr(Filter.Replicate,4,6))%>%
ggplot()+
aes(x=FilteredDate,y=!!sym(Var),color = Filter.Replicate)+
geom_label(inherit.aes=FALSE,
aes(x = as.Date(Locate[1]-Locate[4]*abs(as.numeric(as.factor(WWTP))-2)),
y = Locate[2]+Locate[3]*as.numeric(as.factor(Filter.Replicate)),
color=Filter.Replicate,
label=paste("p[slope]","==",  PVal)),
size=4,
show.legend = FALSE,
parse = TRUE,
data=regressions_data(Var,DF))+
geom_jitter(width = .2)+
geom_smooth(method = "lm", se=FALSE)+
scale_y_log10()+
labs(x="Filtered Date",y=Var,color="Filter Replicate")+
facet_wrap(~WWTP,nrow=3)
return(GraphPlot)
}
DecayPlot("N1.GC.L",SigDecayDF)+
ggtitle("Independent analysis for each filter rep")
MixedEffectModelPlot(SigDecayDF, Var = "N1.GC.L",Title="mixed effect model estimating common slope",subtitle="")
SigDecayDF2 <- SigDecayDF%>%
filter(!(WWTP=="WI Rapids"&Filter.Replicate=="Rep A"))
MixedEffectModelPlot(SigDecayDF2,Var = "N1.GC.L",Title="mixed effect model estimating common slope",  subtitle="excluding apparent outlier")
#overlay PMMoV vs N1
#compare slope of different models and SE
#looking at delay in measuring as a way to control LIMS signal
#what model used comes down to formulating what the goal is
#Brian: early august - students coming back - want to be done asap - where we are report useful in that place
#should we devote resources for collection
DecayPlot("N2.GC.L",SigDecayDF)+
ggtitle("Independent analysis for each filter rep")
MixedEffectModelPlot(SigDecayDF, Var = "N2.GC.L",Title="mixed effect model estimating common slope",subtitle="")
SigDecayDF2 <- SigDecayDF%>%
filter(!(WWTP=="WI Rapids"&Filter.Replicate=="Rep A"))
MixedEffectModelPlot(SigDecayDF2,Var = "N2.GC.L",Title="mixed effect model estimating common slope",
subtitle="excluding apparent outlier")
DecayPlot("PMMoV.GC.L",SigDecayDF,Locate=c(18729,0,3000,14))+
ggtitle("Independent analysis for each filter rep")
MixedEffectModelPlot(SigDecayDF, Var = "PMMoV.GC.L",Title="mixed effect model estimating common slope",subtitle="")
SigDecayDF2 <- SigDecayDF%>%
filter(!(WWTP=="WI Rapids"&Filter.Replicate=="Rep A"))
MixedEffectModelPlot(SigDecayDF2,Var = "PMMoV.GC.L",Title="mixed effect model estimating common slope",
subtitle="excluding apparent outlier")
SigDecayDF2 <- SigDecayDF%>%
#filter(!(WWTP=="WI Rapids"&Filter.Replicate=="Rep A"))%>%
filter(!(WWTP=="Madison"&Filter.Replicate=="Rep A"))
MixedEffectModelPlot(SigDecayDF2,Var = "BCoV.percent.recovery",Title="mixed effect model estimating common slope",
subtitle="excluding apparent outlier")
DecayPlot("BCoV.percent.recovery",SigDecayDF,Locate=c(18729,-9,10,14))+
ggtitle("Independent analysis for each filter rep")
MixedEffectModelPlot(SigDecayDF, Var = "BCoV.percent.recovery",Title="mixed effect model estimating common slope",subtitle="")
SigDecayDF2 <- SigDecayDF%>%
#filter(!(WWTP=="WI Rapids"&Filter.Replicate=="Rep A"))%>%
filter(!(WWTP=="Madison"&Filter.Replicate=="Rep A"))
MixedEffectModelPlot(SigDecayDF2,Var = "BCoV.percent.recovery",Title="mixed effect model estimating common slope",
subtitle="excluding apparent outlier")
SigDecayDF2 <- SigDecayDF%>%
#filter(!(WWTP=="WI Rapids"&Filter.Replicate=="Rep A"))%>%
filter((WWTP=="Madison"&Filter.Replicate=="Rep A"))
SigDecayDF2
MixedEffectModelPlot(SigDecayDF2,Var = "BCoV.percent.recovery",Title="mixed effect model estimating common slope",
subtitle="excluding apparent outlier")
