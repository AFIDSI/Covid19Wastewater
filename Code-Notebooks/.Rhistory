})
#Data of the means of each Filter
Filter_mean_var = reactive({
HFGFilterMean=filtered_data_P()%>%
group_by(Date,Site,`Filter replicates`)%>%
summarise(N1=exp(mean(log(N1),na.rm = T)),
N2=exp(mean(log(N2),na.rm = T)),
PMMoV=exp(mean(log(PMMoV),na.rm = T)),
Pct_BCoV=exp(mean(log(Pct_BCoV),na.rm = T)))
})
source("../Scripts/GenPlotMaking.R")
Date_lim_HFG=c(min(RelData$Date)-14,max(RelData$Date)+14)
Buildplot_gen("CollectedCases",
MainDF=RelData,
ColorType="Small",
Loc="Site",
LineDF=RelRollData,
WeekDF=HFGDateRangeDF,
DateLimits=Date_lim_HFG,
Standards=ConfigOption,
Xfreq="14 days",
AxisPos="bottom",
LineColor="red",
norm="Population",
Colplot=T,
nrow=2)+ Header_theme(ConfigOption)+
theme(axis.text.x = element_text(size = ConfigOption$XAxisLabSiz, colour = "black"),
plot.margin = unit(c(.5,0,0,0), "cm"))
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
library(shiny)
library(ggpubr)
library(dplyr)
library(shinydashboard)
library(shinyjqui)
library(shinycssloaders)
#Data Files and prepwork
source("../Scripts/GenPlotMaking.R")
source("../Scripts/WasteWaterDataProccess.R")
source("../Scripts/CassesDataProccess.R")
source("../Scripts/HelperFunctions.R")
LatWasteFN <- "../../UntrackedData/WW SARS-COV-2 Data V5.xlsx"
LatSpringCaseFN="../../UntrackedData/SpringSemester_CasesByDorm.tsv"
LatFallCaseFN="../../UntrackedData/FallSemester_CasesByDorm.tsv"
HFGWasteFN = "../../UntrackedData/HFG data for stats preliminary 3-18-21.xlsx"
HFGCaseFN="../../UntrackedData/HighFreq_CaseData_2021-05-07.csv"
LatMMSDFN = "../../UntrackedData/MMSD_Cases.2021-05-21.csv"
HFGFrame=HFGInfo(HFGWasteFN)%>%
select(Date,Site=Plant,Filter,Well,N1=N1GC,N2=N2GC,PMMoV=PMMOVGC,Pct_BCoV=BCoV)%>%
mutate(Filter=as.character(Filter),Well=as.character(Well))%>%
rename(`Filter replicates`=Filter)
HFGCaseDF=HFGCasesPARSER(HFGCaseFN)
HFGCaseDFRoll=HFGCaseDF%>%
mutate(EpisodeCases=ifelse(EpisodeCases==-999,2.5,EpisodeCases))%>%
mutate(CollectedCases=ifelse(CollectedCases==-999,2.5,CollectedCases))%>%
mutate(ConfirmedCases=ifelse(ConfirmedCases==-999,2.5,ConfirmedCases))%>%
RollAvg(Facet="Site")%>%
select(Date,Site,ends_with("Cases"))
HFGPop=read.csv("../../UntrackedData/HFGPop.csv.txt")%>%
select(Site=wwtp_name,Population=pop_served)
HFGCaseDF=full_join(HFGPop,HFGCaseDF,by="Site")
HFGCaseDFRoll=full_join(HFGPop,HFGCaseDFRoll,by="Site")
HFGDateRangeDF=WeekendGen(HFGCaseDF$Date)
LatCaseDF=CovidDataPARSER(LatSpringCaseFN,LatFallCaseFN,LatMMSDFN)%>%
filter(!is.na(Site))%>%
select(Date,Site,Cases,Tests,Per_pos)
#return(LatCaseDF)
LatCaseDFRoll=RollPerPos(LatCaseDF,"Cases","Tests",Facet="Site")%>%
select(Date,Site,Cases,Per_pos)
LatWasteDF=WasteWater(LatWasteFN)%>%
mutate(Date=as.Date(Date))%>%
filter(!is.na(Date),!is.na(N1),!is.na(Site))%>%
filter(Date<mdy("6/5/2021"))%>%
select(Date,Site,N1,N2,PMMoV,Pct_BCoV,AVG)
ConfigOption=list(
myseed=1234567890,
XAxisLabSiz=10,
YAxisLabSiz=15,
GenFontSiz=20,
alphaPoint=.7,
PointSize=2,
alphaWeek=.2)
N1Start=min(HFGFrame$Date)
N1End=max(HFGFrame$Date)
CStart=min(HFGCaseDF$Date)
CEnd=max(HFGCaseDF$Date)
SiteOptions=c("Hudson","Kenosha","Platteville","Madison", "Merrill","Plymouth","River Falls","Sun Prairie","Wausau","Oshkosh")
HFGCaseDFRoll%>%
ggplot()+aes(x=Date)+geom_point(aes(y=ConfirmedCases,x=Date-2))+
scale_x_date(limits=c(N1Start,N1End))+
facet_wrap(~Site,scales = "free")+ggtitle("Sparse HFG Case Data")
SiteOptions2=c("Kenosha","Madison", "Sun Prairie","Wausau","Oshkosh")
HFGFrame%>%
filter(!is.na(N1),Site %in% SiteOptions2)%>%
group_by(Site)%>%
summarize(`N1 testing Range`=max(Date)-min(Date),NDays=length(unique(Date)))
SiteOptions2=c("Kenosha","Madison", "Sun Prairie","Wausau")
RelData=HFGCaseDF%>%
filter(Site %in% SiteOptions2)%>%
mutate(Small3=ifelse(EpisodeCases==-999,"Range 1-5","Normal Values"))%>%
mutate(Small=ifelse(CollectedCases==-999,"Range 1-5","Normal Values"))%>%
mutate(Small2=ifelse(ConfirmedCases==-999,"Range 1-5","Normal Values"))%>%
filter(!is.na(Small))%>%
mutate(EpisodeCases=ifelse(EpisodeCases==-999,2.5,EpisodeCases))%>%
mutate(CollectedCases=ifelse(CollectedCases==-999,2.5,CollectedCases))%>%
mutate(ConfirmedCases=ifelse(ConfirmedCases==-999,2.5,ConfirmedCases))
RelRollData=HFGCaseDFRoll%>%
filter(Site %in% SiteOptions2)
RelWasteData=HFGFrame%>%
filter(!is.na(Site))%>%
filter(Site %in% SiteOptions2)
Data_mean_var = reactive({
HFGSiteMean=filtered_data_P()%>%
group_by(Date,Site)%>%
summarise(N1=exp(mean(log(N1),na.rm = T)),
N2=exp(mean(log(N2),na.rm = T)),
PMMoV=exp(mean(log(PMMoV),na.rm = T)),
Pct_BCoV=exp(mean(log(Pct_BCoV),na.rm = T)))
})
#Data of the means of each Filter
Filter_mean_var = reactive({
HFGFilterMean=filtered_data_P()%>%
group_by(Date,Site,`Filter replicates`)%>%
summarise(N1=exp(mean(log(N1),na.rm = T)),
N2=exp(mean(log(N2),na.rm = T)),
PMMoV=exp(mean(log(PMMoV),na.rm = T)),
Pct_BCoV=exp(mean(log(Pct_BCoV),na.rm = T)))
})
source("../Scripts/GenPlotMaking.R")
Date_lim_HFG=c(min(RelData$Date)-14,max(RelData$Date)+14)
Buildplot_gen("CollectedCases",
MainDF=RelData,
ColorType="Small",
Loc="Site",
LineDF=RelRollData,
WeekDF=HFGDateRangeDF,
DateLimits=Date_lim_HFG,
Standards=ConfigOption,
Xfreq="14 days",
AxisPos="bottom",
LineColor="red",
norm="Population",
Colplot=T,
nrow=2)+ Header_theme(ConfigOption)+
theme(axis.text.x = element_text(size = ConfigOption$XAxisLabSiz, colour = "black"),
plot.margin = unit(c(.5,0,0,0), "cm"))
Buildplot_gen(
"N1",
MainDF=RelWasteData,
Loc="Site",
log_scale=T,
ColorType="Filter replicates",
DateLimits=Date_lim_HFG,
RMOutliers=T,
AxisPos="bottom",
Standards=ConfigOption,
Xfreq="14 days",
nrow=2)+ Header_theme(ConfigOption)+
theme(axis.text.x = element_text(size = ConfigOption$XAxisLabSiz, colour = "black"),
plot.margin = unit(c(.5,0,0,0), "cm"))
#EpisodeCases    ConfirmedCases CollectedCases
#annotate_figure(top=text_grob("No clear pattern partially due to short time frame",size=15),ggarrange(p1,p2,nrow = 2,align="hv",common.legend = T))
HFGFrame%>%
filter(Site %in% SiteOptions2)%>%
mutate(marked=ifelse(PMMoV<1*10^7,"Low PMMoV","MAIN G"))%>%
mutate(marked=ifelse(PMMoV>1*10^8,"High PMMoV",marked))%>%
ggplot()+aes(x=PMMoV,y=N1,color=marked)+geom_point()+scale_y_log10()+
scale_x_log10()+facet_wrap(~Site)+ggtitle("N1 Vs PMMoV looking for trend")
HFGFrame%>%
filter(Site %in% SiteOptions2)%>%
mutate(marked=ifelse(PMMoV<1*10^7,"Low PMMoV","MAIN G"))%>%
mutate(marked=ifelse(PMMoV>1*10^8,"High PMMoV",marked))%>%
ggplot()+aes(x=Date,y=N1,color=marked)+geom_point()+
scale_y_log10()+facet_wrap(~Site)+ggtitle("N1 Vs Date using categories from previous graph")
HFGFrame%>%
filter(Site %in% SiteOptions2)%>%
filter(N1<2e6)%>%
#mutate(marked=ifelse(Pct_BCoV<.5,"Low %Bcov","MAIN G"))%>%
#mutate(marked=ifelse(Pct_BCoV>10,"High %Bcov",marked))%>%
ggplot()+aes(x=Pct_BCoV,y=N1)+geom_point()+
#scale_y_log10()+
#scale_x_log10()+
facet_wrap(~Site)+
ggtitle("N1 Vs %Bcov looking for trend")
#, scales = "free"
#scale_x_log10()+,color=marked
HFGFrame%>%
filter(Site %in% SiteOptions2)%>%
mutate(marked=ifelse(Pct_BCoV<1,"%Bcov<.5","MAIN G"))%>%
mutate(marked=ifelse(Pct_BCoV>10,"%Bcov >10%",marked))%>%
ggplot()+aes(x=Date,y=N1,color=marked)+geom_point()+
scale_y_log10()+facet_wrap(~Site)+
ggtitle("N1 Vs Date using thresholding")
#meam=data.frame(a=1:1000)
#meam$b=30*runif(1000)-15
#meam%>%
#  mutate(noiscor=a+b)%>%
#  ggplot()+geom_point(aes(x=a,y=noiscor))+
#  scale_y_log10()+
#  scale_x_log10()
# shift=-0
# LeftDate=min(LatWasteDF$Date)
# RightDate=max(LatWasteDF$Date)
# p1=LatWasteDF%>%
#   filter((Site=="UW-Sellery")|(Site=="UW-LakeShore"))%>%
#   ggplot()+aes(x=Date,y=N1)+geom_point(aes(color=N1>5e4))+
#   #scale_y_log10()+
#   #geom_smooth(span=.42)+
#   facet_wrap(~Site)+
#   scale_x_date(limits=c(LeftDate,RightDate))
#
# p2=LatCaseDF%>%
#   filter((Site=="UW-Sellery")|(Site=="UW-LakeShore"))%>%
#   ggplot()+aes(x=Date)+
#   geom_point(aes(y=Cases))+
#   geom_line(aes(y=SevCases))+
#   facet_wrap(~Site,scales="free_y")+
#   scale_x_date(limits=c(LeftDate+shift,RightDate+shift))
#
# p3=LatCaseDF%>%
#   filter((Site=="UW-Sellery")|(Site=="UW-LakeShore"))%>%
#   filter(Tests<2000)%>%
#   ggplot()+aes(x=Date)+
#   geom_point(aes(y=Tests,color="Tests"))+
#   geom_line(aes(y=SevTest,color="Tests"))+
#   facet_wrap(~Site,scales="free_y")+
#   scale_x_date(limits=c(LeftDate+shift,RightDate+shift))
#
# p4=LatCaseDF%>%
#   filter(Per_pos<50)%>%
#   filter((Site=="UW-Sellery")|(Site=="UW-LakeShore"))%>%
#   ggplot()+aes(x=Date)+
#   geom_point(aes(y=Per_pos,color="Per_pos"))+
#   geom_line(aes(y=rollingPer_pos,color="Per_pos"))+
#   facet_wrap(~Site,scales="free_y")+
#   scale_x_date(limits=c(LeftDate+shift,RightDate+shift))
#
# annotate_figure(top=text_grob("Dorm data with thresholding",size=15),ggarrange(plotlist = list(p1,p2),nrow = 2,align="hv",common.legend = T))
# shift=-0
# LeftDate=min(LatWasteDF$Date)
# RightDate=max(LatWasteDF$Date)
# p1=LatWasteDF%>%
#   filter((Site=="Madison"))%>%
#   ggplot()+aes(x=Date,y=N1)+geom_point(aes(color=N1>5e4))+
#   scale_y_log10()+
#   #geom_smooth(span=.42)+
#   facet_wrap(~Site)+
#   scale_x_date(limits=c(LeftDate,RightDate))
#
# p2=LatCaseDF%>%
#   filter((Site=="Madison"))%>%
#   ggplot()+aes(x=Date)+
#   geom_point(aes(y=Cases,color="Cases"))+
#   geom_line(aes(y=SevCases,color="Cases"))+
#   facet_wrap(~Site,scales="free_y")+
#   scale_x_date(limits=c(LeftDate+shift,RightDate+shift))
#
# p3=LatCaseDF%>%
#   filter((Site=="Madison"))%>%
#   filter(Tests<2000)%>%
#   ggplot()+aes(x=Date)+
#   geom_point(aes(y=Tests,color="Tests"))+
#   geom_line(aes(y=SevTest,color="Tests"))+
#   facet_wrap(~Site,scales="free_y")+
#   scale_x_date(limits=c(LeftDate+shift,RightDate+shift))
#
# p4=LatCaseDF%>%
#   filter(Per_pos<50)%>%
#   filter((Site=="Madison"))%>%
#   ggplot()+aes(x=Date)+
#   geom_point(aes(y=Per_pos,color="Per_pos"))+
#   geom_line(aes(y=rollingPer_pos,color="Per_pos"))+
#   facet_wrap(~Site,scales="free_y")+
#   scale_x_date(limits=c(LeftDate+shift,RightDate+shift))
#
# ggarrange(plotlist = list(p1,p2,p3,p4),nrow = 4,align="hv")
shift=-0
LeftDate=min(LatWasteDF$Date)
RightDate=max(LatWasteDF$Date)
p1=LatWasteDF%>%
filter((Site=="UW-Sellery")|(Site=="UW-LakeShore"))%>%
mutate(Loc="10")%>%
mutate(Loc=ifelse(Site=="UW-LakeShore"&Date<mdy("1/20/2021"),"4",Loc))%>%
mutate(Loc=ifelse(Site=="UW-LakeShore"&Date<mdy("12/23/2020"),"3",Loc))%>%
mutate(Loc=ifelse(Site=="UW-LakeShore"&Date<mdy("11/18/2020"),"2",Loc))%>%
mutate(Loc=ifelse(Site=="UW-LakeShore"&Date<mdy("10/9/2020"),"1",Loc))%>%
mutate(Loc=ifelse(Site=="UW-Sellery"&Date<mdy("2/5/2021"),"4",Loc))%>%
mutate(Loc=ifelse(Site=="UW-Sellery"&Date<mdy("12/8/2020"),"3",Loc))%>%
mutate(Loc=ifelse(Site=="UW-Sellery"&Date<mdy("11/18/2020"),"2",Loc))%>%
mutate(Loc=ifelse(Site=="UW-Sellery"&Date<mdy("10/11/2020"),"1",Loc))%>%
ggplot()+
geom_boxplot(aes(y=N1,x=Date,group=Loc),fill="light blue")+
scale_y_log10()+
facet_wrap(~Site)
scale_x_date(limits=c(LeftDate,RightDate))
RelCaseLongDF=LatCaseDF%>%
filter((Site=="UW-Sellery")|(Site=="UW-LakeShore"))
RelCaseLongRollDF= LatCaseDFRoll%>%
filter((Site=="UW-Sellery")|(Site=="UW-LakeShore"))
Date_lim_long=c(min(RelCaseLongDF$Date),max(RelCaseLongDF$Date))
p2=Buildplot_gen(
"Cases",
MainDF=RelCaseLongDF,
Loc="Site",
LineDF=RelCaseLongRollDF,
DateLimits=Date_lim_long+shift,
Standards=ConfigOption,
AxisPos="bottom",
LineColor="red",
Colplot=F,scalesF="free_y")
annotate_figure(top=text_grob("Dorm data with ad hoc binning",size=15),ggarrange(p1,p2,nrow = 2,align="hv"))
LatData=LatWasteDF%>%
filter((Site=="Madison"))
HFGData=HFGFrame%>%
filter((Site=="Madison"))
#??lat data off shifted by one day??
ggplot()+geom_point(aes(y=N1,color=`Filter replicates`,x=Date,shape="High Frequency"),data=HFGData)+
geom_point(aes(y=N1,x=Date-1,shape="Longitudinal"),data=LatData,size=2.5)+
scale_y_log10()+
scale_x_date(limits=c(N1Start,N1End))+ggtitle("HFG and Longitudinal data match")
Date_lim_HFG=c(min(RelData$Date)-2,max(RelData$Date)+2)
Buildplot_gen("CollectedCases",
MainDF=RelData,
ColorType="Small",
Loc="Site",
LineDF=RelRollData,
WeekDF=HFGDateRangeDF,
DateLimits=Date_lim_HFG,
Standards=ConfigOption,
Xfreq="14 days",
AxisPos="bottom",
LineColor="red",
norm="Population",
Colplot=T,
nrow=2)+ Header_theme(ConfigOption)+
theme(axis.text.x = element_text(size = ConfigOption$XAxisLabSiz, colour = "black"),
plot.margin = unit(c(.5,0,0,0), "cm"))
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
?updateSelectInput
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
?geom_point
?vignette("ggplot2-specs").
?vignette("ggplot2-specs")
vignette("ggplot2-specs")
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
>scale_color_discrete
?scale_color_discrete
runApp('CovidDashbaordMain.R')
?scale_color_manual
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
?scale_color_manual
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
?scale_color_manual
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
if(Bold){
#slightly jank
RPlot=RPlot+scale_color_manual(values=rep("Black",3))
}
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
library(shiny)
library(ggpubr)
library(dplyr)
library(shinydashboard)
library(shinyjqui)
library(shinycssloaders)
#Data Files and prepwork
source("../Scripts/GenPlotMaking.R")
source("../Scripts/WasteWaterDataProccess.R")
source("../Scripts/CassesDataProccess.R")
source("../Scripts/HelperFunctions.R")
LatWasteFN <- "../../UntrackedData/WW SARS-COV-2 Data V5.xlsx"
LatSpringCaseFN="../../UntrackedData/SpringSemester_CasesByDorm.tsv"
LatFallCaseFN="../../UntrackedData/FallSemester_CasesByDorm.tsv"
HFGWasteFN = "../../UntrackedData/HFG data for stats preliminary 3-18-21.xlsx"
HFGCaseFN="../../UntrackedData/HighFreq_CaseData_2021-05-07.csv"
LatMMSDFN = "../../UntrackedData/MMSD_Cases.2021-05-21.csv"
source("../Scripts/WasteShiny/PrepData.R", local = TRUE)
library(shiny)
library(ggpubr)
library(dplyr)
library(shinydashboard)
library(shinyjqui)
library(shinycssloaders)
#Data Files and prepwork
source("../Scripts/GenPlotMaking.R")
source("../Scripts/WasteWaterDataProccess.R")
source("../Scripts/CassesDataProccess.R")
source("../Scripts/HelperFunctions.R")
LatWasteFN <- "../../UntrackedData/WW SARS-COV-2 Data V5.xlsx"
LatSpringCaseFN="../../UntrackedData/SpringSemester_CasesByDorm.tsv"
LatFallCaseFN="../../UntrackedData/FallSemester_CasesByDorm.tsv"
HFGWasteFN = "../../UntrackedData/HFG data for stats preliminary 3-18-21.xlsx"
HFGCaseFN="../../UntrackedData/HighFreq_CaseData_2021-05-07.csv"
LatMMSDFN = "../../UntrackedData/MMSD_Cases.2021-05-21.csv"
source("../Scripts/WasteShiny/PrepData.R", local = TRUE)
LatWasteDF
HFGFrame
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
?facet_wrap
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
runApp('CovidDashbaordMain.R')
