library(lubridate)
#Data Files and prep work
source("../Scripts/GenPlotMaking.R")
source("../Scripts/WasteWaterDataProccess.R")
source("../Scripts/CassesDataProccess.R")
source("../Scripts/HelperFunctions.R")
PathStarter="Z:/"
SigWasteFN <- paste0(PathStarter,"COVID-19_WastewaterAnalysis/data/raw/TimeSeriesDataforStats072321.csv")
SigDecayDF <- read.csv(SigWasteFN)%>%
rename(collectionDate = Collection.Date,
FilteredDate = Filtered.Date)%>%
mutate(collectionDate = mdy(collectionDate),
TimePassed = mdy(FilteredDate)-collectionDate,
N1.CT = as.numeric(N1.CT))
SigDecayDF%>%
group_by(WWTP,collectionDate)%>%
summarise(n())
SigDecayDF%>%
group_by(WWTP,TimePassed)%>%
summarise(n())
SigDecayDF%>%
ggplot()+
aes(x=TimePassed,y=N1.GC.L)+
geom_point()+
geom_smooth(method = "lm")+
facet_wrap(~WWTP,nrow=3,scales = "free")
SigDecayDF%>%
group_by(WWTP,TimePassed)%>%
summarise(N1=exp(mean(log(N1.GC.L))))%>%
ggplot()+
aes(x=TimePassed,y=N1)+
geom_point()+
geom_smooth(method = "lm", se=FALSE)+
facet_wrap(~WWTP,nrow=3,scales = "free")
SigDecayDF%>%
ggplot()+
aes(x=TimePassed,y=N1.GC.L)+
geom_point()+
geom_smooth(method = "lm", se=FALSE)+
facet_wrap(~WWTP,nrow=3,scales = "free")
SigDecayDF%>%
group_by(WWTP,TimePassed)%>%
summarise(N1=exp(mean(log(N1.GC.L))))%>%
ggplot()+
aes(x=TimePassed,y=N1)+
geom_point()+
geom_smooth(method = "lm", se=FALSE)+
facet_wrap(~WWTP,nrow=3,scales = "free")
SigDecayDF%>%
ggplot()+
aes(x=TimePassed,y=N1.GC.L)+
geom_point()+
geom_smooth(method = "lm", se=FALSE)+
facet_wrap(~WWTP,nrow=3,scales = "free")
SigDecayDF%>%
group_by(WWTP,TimePassed)%>%
summarise(N1=exp(mean(log(N1.GC.L),rm.na = TRUE)))%>%
ggplot()+
aes(x=TimePassed,y=N1)+
geom_point()+
geom_smooth(method = "lm", se=FALSE)+
facet_wrap(~WWTP,nrow=3,scales = "free")
SigDecayDF%>%
group_by(WWTP,TimePassed)%>%
summarise(N1=mean(N1.GC.L,rm.na = TRUE))%>%
ggplot()+
aes(x=TimePassed,y=N1)+
geom_point()+
geom_smooth(method = "lm", se=FALSE)+
facet_wrap(~WWTP,nrow=3,scales = "free")
SigDecayDF%>%
group_by(WWTP,TimePassed)%>%
summarise(N1=mean(N1.GC.L,rm.na = TRUE))
SigDecayDF%>%
group_by(WWTP,TimePassed)%>%
summarise(N1=mean(N1.GC.L,rm.na = TRUE))
SigDecayDF
SigDecayDF%>%
group_by(WWTP,TimePassed)%>%
summarise(N1=mean(N1.GC.L,na.rm = TRUE))
SigDecayDF%>%
group_by(WWTP,TimePassed)%>%
summarise(N1=mean(N1.GC.L,na.rm = TRUE))%>%
ggplot()+
aes(x=TimePassed,y=N1)+
geom_point()+
geom_smooth(method = "lm", se=FALSE)+
facet_wrap(~WWTP,nrow=3,scales = "free")
SigDecayDF%>%
ggplot()+
aes(x=TimePassed,y=N1.GC.L)+
geom_point()+
geom_smooth(method = "lm", se=FALSE)+
facet_wrap(~WWTP,nrow=3,scales = "free")
SigDecayDF%>%
group_by(WWTP,TimePassed)%>%
summarise(N1=mean(N1.GC.L,na.rm = TRUE))%>%
ggplot()+
aes(x=TimePassed,y=N1)+
geom_point()+
geom_smooth(method = "lm", se=FALSE)+
facet_wrap(~WWTP,nrow=3,scales = "free")
SigDecayDF%>%
ggplot()+
aes(x=TimePassed,y=N1.GC.L)+
geom_point()+
geom_smooth(method = "lm", se=FALSE)+
facet_wrap(~WWTP,nrow=3,scales = "free")
SigDecayDF%>%
group_by(WWTP,TimePassed)%>%
summarise(N1=mean(N1.GC.L,na.rm = TRUE))%>%
ggplot()+
aes(x=TimePassed,y=N1)+
geom_point()+
geom_smooth(method = "lm", se=FALSE)+
facet_wrap(~WWTP,nrow=3,scales = "free")
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
library(ggpubr)
library(tidyverse)
library(forecast)
library(lmtest)
library(lubridate)
#Data Files and prep work
source("../Scripts/GenPlotMaking.R")
source("../Scripts/WasteWaterDataProccess.R")
source("../Scripts/CassesDataProccess.R")
source("../Scripts/HelperFunctions.R")
PathStarter="Z:/"
SigWasteFN <- paste0(PathStarter,"COVID-19_WastewaterAnalysis/data/raw/TimeSeriesDataforStats072321.csv")
SigDecayDF <- read.csv(SigWasteFN)%>%
rename(collectionDate = Collection.Date,
FilteredDate = Filtered.Date)%>%
mutate(collectionDate = mdy(collectionDate),
TimePassed = mdy(FilteredDate)-collectionDate,
N1.CT = as.numeric(N1.CT))
SigDecayDF%>%
group_by(WWTP,collectionDate)%>%
summarise(n())
SigDecayDF%>%
group_by(WWTP,TimePassed)%>%
summarise(n())
SigDecayDF%>%
ggplot()+
aes(x=TimePassed,y=N1.GC.L)+
geom_point()+
geom_smooth(method = "lm", se=FALSE)+
facet_wrap(~WWTP,nrow=3,scales = "free")
SigDecayDF%>%
group_by(WWTP,TimePassed)%>%
summarise(N1=mean(N1.GC.L,na.rm = TRUE))%>%
ggplot()+
aes(x=TimePassed,y=N1)+
geom_point()+
geom_smooth(method = "lm", se=FALSE)+
facet_wrap(~WWTP,nrow=3,scales = "free")
SigDecayDF%>%
ggplot()+
aes(x=TimePassed,y=N1.GC.L)+
geom_point()+
geom_smooth(method = "lm", se=FALSE)+
facet_wrap(~WWTP,nrow=3,scales = "free")
SigDecayDF%>%
group_by(WWTP,TimePassed)%>%
summarise(N1=mean(N1.GC.L,na.rm = TRUE))%>%
ggplot()+
aes(x=TimePassed,y=N1)+
geom_point()+
geom_smooth(method = "lm", se=FALSE)+
facet_wrap(~WWTP,nrow=3,scales = "free")
SigDecayDF%>%
ggplot()+
aes(x=TimePassed,y=N1.GC.L)+
geom_point()+
geom_smooth(method = "lm", se=FALSE)+
facet_wrap(~WWTP,nrow=3,scales = "free")
SigDecayDF%>%
group_by(WWTP,TimePassed)%>%
summarise(N1=mean(N1.GC.L,na.rm = TRUE))%>%
ggplot()+
aes(x=TimePassed,y=N1)+
geom_point()+
geom_smooth(method = "lm", se=FALSE)+
facet_wrap(~WWTP,nrow=3,scales = "free")
SigDecayDF
SigDecayDF%>%
group_by(WWTP,TimePassed)%>%
summarise(BCoV=mean(BCoV.percent.recovery,na.rm = TRUE))%>%
ggplot()+
aes(x=TimePassed,y=BCoV)+
geom_point()+
geom_smooth(method = "lm", se=FALSE)+
facet_wrap(~WWTP,nrow=3,scales = "free")
SigDecayDF
SigDecayDF%>%
group_by(WWTP,TimePassed)%>%
summarise(PMMoV=mean(PMMoV.GC.L,na.rm = TRUE))%>%
ggplot()+
aes(x=TimePassed,y=PMMoV)+
geom_point()+
geom_smooth(method = "lm", se=FALSE)+
facet_wrap(~WWTP,nrow=3,scales = "free")
SigDecayDF%>%
group_by(WWTP,TimePassed)%>%
summarise(PMMoV=mean(log(PMMoV.GC.L),na.rm = TRUE))%>%
ggplot()+
aes(x=TimePassed,y=PMMoV)+
geom_point()+
geom_smooth(method = "lm", se=FALSE)+
facet_wrap(~WWTP,nrow=3,scales = "free")
SigDecayDF%>%
ggplot()+
aes(x=TimePassed,y=N1.GC.L)+
geom_point()+
geom_smooth(method = "lm", se=FALSE)+
facet_wrap(~WWTP,nrow=3,scales = "free")
SigDecayDF%>%
group_by(WWTP,TimePassed)%>%
summarise(N1=mean(log(N1.GC.L),na.rm = TRUE))%>%
ggplot()+
aes(x=TimePassed,y=N1)+
geom_point()+
geom_smooth(method = "lm", se=FALSE)+
facet_wrap(~WWTP,nrow=3,scales = "free")
SigDecayDF%>%
group_by(WWTP,TimePassed)%>%
summarise(BCoV=mean(BCoV.percent.recovery,na.rm = TRUE))%>%
ggplot()+
aes(x=TimePassed,y=BCoV)+
geom_point()+
geom_smooth(method = "lm", se=FALSE)+
facet_wrap(~WWTP,nrow=3,scales = "free")
SigDecayDF%>%
group_by(WWTP,TimePassed)%>%
summarise(PMMoV=mean(log(PMMoV.GC.L),na.rm = TRUE))%>%
ggplot()+
aes(x=TimePassed,y=PMMoV)+
geom_point()+
geom_smooth(method = "lm", se=FALSE)+
facet_wrap(~WWTP,nrow=3,scales = "free")
ccfvalues2  <-  ccf(log(N1TSVec),temp,type = c("correlation"),na.action = na.pass)
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
library(ggpubr)
library(dplyr)
library(forecast)
library(lmtest)
library(lubridate)
#Data Files and prep work
source("../../Scripts/GenPlotMaking.R")
source("../../Scripts/WasteWaterDataProccess.R")
source("../../Scripts/CassesDataProccess.R")
source("../../Scripts/HelperFunctions.R")
#LatWasteFN <- "../../../UntrackedData/WW SARS-COV-2 Data V5.xlsx"
LatMMSDFN  <-  "../../CaseData/results/2021-06-24/MMSD_Cases.csv"
LatSpringCaseFN <- "../../../UntrackedData/SpringSemester_CasesByDorm.tsv"
LatFallCaseFN <- "../../../UntrackedData/FallSemester_CasesByDorm.tsv"
LIMSFN <- "../../../UntrackedData/WATERMICRO_WW_COVID-2021-06-30 17 40.xlsx"
LatCaseDF <- CovidDataPARSER(LatSpringCaseFN,LatFallCaseFN,LatMMSDFN)%>%
filter(!is.na(Site))%>%
select(Date,Site,Cases,Tests,Per_pos)
missing_codes <- c("","NA","0","Undetected","Not Detected",
"Field Parameters to be filled in",
"Inhibited-to be re-ran", "#DIV/0!","-","In progress")
LIMSFullDFAllRows <- LIMSDataPARSER(LIMSFN)
LIMSFullDF <- LIMSFullDFAllRows%>%
select(Date,Site, BCoV, N1,N1Error,N2, N2Error, AVG,PMMoV,Pop,FlowRate)
WeekdayDF <- LIMSFullDF%>%
mutate(weekday=weekdays(Date))%>%
filter(N1>0,N1Error>0)
WeekdayDF$weekday <- factor(WeekdayDF$weekday,
levels= c("Monday", "Tuesday", "Wednesday", "Thursday","Friday","Saturday","Sunday"))
WeekdayDF%>%
group_by(weekday)%>%
summarize(N1M=mean(N1),n())
# t.test(filter(WeekdayDF,weekday=="Tuesday")$N1,filter(WeekdayDF,weekday=="Saturday")$N1)
summary(aov(N1~weekday+Site,data=WeekdayDF))
#24/34/45/47/67
WeekdaySmoothedDF <- RollAvg(LIMSFullDF,var=c("N1","N1Error","PMMoV"))%>%
mutate(weekday=weekdays(Date))%>%
filter(N1>0,N1Error>0)
WeekdaySmoothedDF$weekday <- factor(WeekdaySmoothedDF$weekday,
levels= c("Monday", "Tuesday", "Wednesday", "Thursday","Friday","Saturday","Sunday"))
summary(aov(N1~weekday+Site,data=WeekdaySmoothedDF))
WeekdayCaseDF <- LatCaseDF%>%
mutate(weekday=weekdays(Date))%>%
filter(Cases>0,Per_pos>0)
WeekdayDF$weekday <- factor(WeekdayDF$weekday,
levels= c("Monday", "Tuesday", "Wednesday", "Thursday","Friday","Saturday","Sunday"))
WeekdayCaseDF%>%
group_by(weekday)%>%
summarize(CasesM=mean(Cases),Per_posM=mean(Per_pos),n())
#t.test(filter(WeekdayDF,weekday=="Monday")$N1,filter(WeekdayDF,weekday=="Thursday")$N1)
summary(aov(Per_pos~weekday+Site,data=WeekdayCaseDF))
#24/34/45/47/67
WeekdaySmoothedCaseDF <- RollPerPos(LatCaseDF,"Cases","Tests",Facet="Site")%>%
mutate(weekday=weekdays(Date))%>%
filter(Cases>0,Per_pos>0)
WeekdaySmoothedCaseDF$weekday <- factor(WeekdaySmoothedCaseDF$weekday,
levels= c("Monday", "Tuesday", "Wednesday", "Thursday","Friday","Saturday","Sunday"))
summary(aov(Per_pos~weekday+Site,data=WeekdaySmoothedCaseDF))
library(lmtest)
library(astsa)
# LIMSMadDF=LIMSFullDF%>%
#   filter(Site=="Madison")
# grangertest(formula=log(N1)~log(N2),data=LIMSMadDF)
MadCasedat<-RollPerPos(LatCaseDF,"Cases","Tests",Facet="Site",n=14)%>%
filter(Site=="Madison")
MadLIMsdata<-RollAvg(LIMSFullDF,var=c("N1","N2","AVG","PMMoV","BCoV"),n=14)%>%
filter(Site=="Madison")%>%
select(Site,Date,N1,N2,PMMoV,BCoV,AVG)
LIMSFullDFAllRows2 <- LIMSFullDFAllRows%>%
select(-N1,-N2,-PMMoV,-BCoV,-AVG)
MadLIMsdata2 <- inner_join(MadLIMsdata,LIMSFullDFAllRows2,by=c("Date","Site"))
Maddata <- inner_join(MadCasedat,MadLIMsdata2,by=c("Date","Site"))
TSMad <- ts(Maddata)
N1TSVec <- TSMad[,6]
N2TSVec <- TSMad[,7]
AVGTSVec <- TSMad[,10]
PMMoVTSVec <- TSMad[,8]
BCoVTSVec <- TSMad[,9]
FlowRateTSVec <- TSMad[,12]
ConductivityTSVec <- TSMad[,22]
temperatureTSVec <- TSMad[,58]
tssTSVec <- TSMad[,60]
CasesTSVec <- TSMad[,3]
TestsTSVec <- TSMad[,4]
Per_posTSVec <- TSMad[,5]
ts.plot(log(N1TSVec),log(N2TSVec),log(AVGTSVec),
col=c("red","blue", "dark green"),
gpars=list(xlab="Time (Days)", ylab="N Conc"))
var.test(log(N1TSVec),log(N2TSVec))
var.test(log(N1TSVec[50:214]),log(N2TSVec[50:214]))
#n1_sars_cov2_units == "Gene copies/L" NA
#capacity_mgd == Site dependent
#composite_freq == NA  "24hr-FWCmp" "24hr-TWCmp"
#concentration_method == "filtMgCl2" NA
#extraction_method == PromegaHT
#hf183_conc == NA
#inhibition_adjust == "No"
#inhibition_detect == "No"
#inhibition_method == "BRSV-RNA"
#lod_ref == "Klymus19"
#n1_num_no_target_control == "3" or 9
#n1_num_ntc_amplify ==NA
#n1_sars_cov2_units == "Gene copies/L"
#n2_num_ntc_amplify == NA
#n2_sars_cov2_units == "Gene copies/L"
#pcr_type == qPCR
#quant_stan_ref == IDT
#quant_stan_type == DNA-plasm
#sample_location == influent "upstream"
#sample_location_specify == intercepters?
#sample_matrix == Influent (Untreated Waste H2O)
#sample_type == composite
#state == WI
#n1_ntc_amplify
#
unique(LIMSFullDFAllRows$state)
UniqueLIMS=LIMSFullDFAllRows%>%
summarise(across(.cols = everything(),.fns=~length(unique(.x))))%>%
select(Cov1_below_lod,bod,composite_freq,concentration_method,
extraction_method,hf183_conc,inhibition_adjust,inhibition_detect,
inhibition_method,lod_ref,n1_ntc_amplify,n1_num_no_target_control,
n1_num_ntc_amplify,n1_sars_cov2_lod,n1_sars_cov2_units,n2_ntc_amplify,
n2_num_no_target_control, n2_num_ntc_amplify,n2_sars_cov2_lod,
n2_sars_cov2_units, pcr_type, quant_stan_ref, quant_stan_type,
sample_location, sample_matrix, sample_type, state
)
#PH
LIMSFullDFAllRows%>%
mutate(ph=as.numeric(ph))%>%
filter(ph<100)%>%
ggplot()+
geom_point(aes(x=ph,y=N1,color="N1"))+
geom_point(aes(x=ph,y=N1Error,color="N1Error"))+
scale_y_log10()+
ggtitle("No clear relation between ph and N1/N1Error")
#FlowRate
LIMSFullDFAllRows%>%
mutate(FlowRate=as.numeric(FlowRate))%>%
select(FlowRate,!FlowRate)%>%
group_by(Site)%>%
summarise(FlowRateS=mean(FlowRate,na.rm=TRUE),Pop=mean(Pop,na.rm=TRUE))%>%
ggplot()+
geom_point(aes(x=Pop,y=FlowRateS))+
ggtitle("Nearly Perfect linear relation between Pop and Flowrate")
LIMSFullDFAllRows%>%
group_by(Site)%>%
summarise(SE1=mean(N1Error,na.rm=TRUE),N1S=mean(N1,na.rm=TRUE),Pop=mean(Pop,na.rm=TRUE))%>%
ggplot()+
geom_point(aes(x=Pop,y=SE1))+
scale_x_log10()+
ggtitle("no clear relationship between N1/N1Error and Pop")
#capacity_mgdS
LIMSFullDFAllRows%>%
mutate(capacity_mgd=as.numeric(capacity_mgd))%>%
select(capacity_mgd,!capacity_mgd)%>%
group_by(Site)%>%
summarise(capacity_mgdS=mean(capacity_mgd,na.rm=TRUE),Pop=mean(Pop,na.rm=TRUE))%>%
ggplot()+
geom_point(aes(x=Pop,y=capacity_mgdS))+
ggtitle("Nearly Perfect linear relation between Pop and capacity_mgdS")
#TO DO capacity_mgd variance within Site
#conductivity
LIMSFullDFAllRows%>%
mutate(conductivity=as.numeric(conductivity))%>%
select(conductivity,!conductivity)%>%
group_by(Site)%>%
ggplot()+
geom_point(aes(x=conductivity,y=N1Error))+
scale_y_log10()+
ggtitle("no clear relation between N1Error and conductivity")
#TO DO conductivity variance within Site
#sample_collect_time
LIMSFullDFAllRows%>%
mutate(sample_collect_time=as.POSIXct(sample_collect_time,format="%H:%M"))%>%
select(sample_collect_time,!sample_collect_time)%>%
ggplot()+
geom_point(aes(x=sample_collect_time,y=N1Error))+
scale_y_log10()+
ggtitle("no clear relation between sample_collect_time and N1Se")
#TO DO conductivity variance within Site
LIMSFullDFAllRows%>%
group_by(sample_type)%>%
summarise(N1=mean(N1,na.rm=TRUE),N1SE=mean(N1Error,na.rm=TRUE))
LIMSFullDFAllRows%>%
mutate(tss=as.numeric(tss))%>%
select(tss,!tss)%>%
ggplot()+
geom_point(aes(x=tss,y=N1Error))+
scale_y_log10()+
ggtitle("no clear relation between sample_collect_time and N1Se")
LIMSFullDFAllRows%>%
mutate(temperature=as.numeric(temperature))%>%
select(temperature,!temperature)%>%
ggplot()+
geom_point(aes(x=temperature,y=N1Error))+
scale_y_log10()+
ggtitle("no clear relation between sample_collect_time and N1Se")
plot(log(N1TSVec))
plot(log(PMMoVTSVec))
plot(log(BCoVTSVec))
ccf(log(PMMoVTSVec),log(N1TSVec),type = c("correlation"),na.action = na.pass)
ccf(log(BCoVTSVec),log(N1TSVec),type = c("correlation"),na.action = na.pass)
ccf(log(PMMoVTSVec),log(BCoVTSVec),type = c("correlation"),na.action = na.pass)
#might be leading one or lagging the other
#what is the relationship between N1 and PMMoV with high ccf
#weighting? of weird values
#window - outliers - trend
#ccf of loess smooth for N1 and PMMoV over values of span
#detrend N1?
#PMMoV trend
acf(PMMoVTSVec,na.action = na.pass)
pacf(PMMoVTSVec,na.action = na.pass)
MadLIMsdata
LIMSFullDF%>%
filter(Site=="Madison")
plot(Per_posTSVec)
plot(log(N1TSVec))
ccfvalues1  <-  ccf(Per_posTSVec,log(N1TSVec),type = c("correlation"),na.action = na.pass)
alldata1 <- ts.intersect(Per_posTSVec,log(N1TSVec),
N1A=stats::lag(log(N1TSVec),1),
N1B=stats::lag(log(N1TSVec),-20),
N1C=stats::lag(log(N1TSVec),10),
N1D=stats::lag(log(N1TSVec),20))
tryit1  <- lm(Per_posTSVec~N1D+N1C, data = alldata1)
PerN1ModSum <- summary(tryit1)
#PerN1ACFResid <- acf2(residuals(tryit1))
R2=0.2849
#Check for geo mean
#N1 vs %Pos
#not sure on analysis
#look at assumptions
#sliding window package
#many are doing the same things with different goals
#at least same idea
#Other approaches
#should be standard but it seems not to be
#not very complicated - how to pick right simple thing
#Chris - what he knows about TS
library(limma)
WeightedPred <- loessFit(y=log(Maddata$N1),
x=Maddata$Date,
span=.11,
min.weight=0,
max.weight=1e8,
iterations=10)$fitted
temp <- ts(WeightedPred)
#-stats::lag(CasesTSVec,1)
ccfvalues2  <-  ccf(log(N1TSVec),temp,type = c("correlation"),na.action = na.pass)
plot(temp)
plot(log(N1TSVec))
ccfvalues2  <-  ccf(CasesTSVec,temp,type = c("correlation"),na.action = na.pass)
ccfvalues2  <-  ccf(CasesTSVec,log(N1TSVec),type = c("correlation"),na.action = na.pass)
temp
ccfvalues2  <-  ccf(CasesTSVec,temp,type = c("correlation"),na.action = na.pass)
ccfvalues2  <-  ccf(CasesTSVec,log(N1TSVec),type = c("correlation"),na.action = na.pass)
ccfvalues2  <-  ccf(CasesTSVec,temp,type = c("correlation"),na.action = na.pass)
temp <- ts(WeightedPred)
temp2 <- log(N1TSVec)
ccfvalues2  <-  ccf(CasesTSVec,temp,type = c("correlation"),na.action = na.pass)
ccfvalues2  <-  ccf(CasesTSVec,temp,type = c("correlation"),na.action = na.pass)
ccfvalues2  <-  ccf(CasesTSVec,temp2,type = c("correlation"),na.action = na.pass)
ccfvalues2  <-  ccf(CasesTSVec,temp2,type = c("correlation"),na.action = na.pass)
ccfvalues2  <-  ccf(CasesTSVec,temp,type = c("correlation"),na.action = na.pass)
