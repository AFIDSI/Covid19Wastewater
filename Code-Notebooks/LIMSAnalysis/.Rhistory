#include slope in graph
#log linear model estimating degergation rate
#Note madison weirdness with star or dag and describe in footnote
#Mark BCoV as non log
#exlude mad because only 2 non 0 data points
colnames(FinalTable) <- c("Decay Rate","SE","P")
knitr::kable(FinalTable,
caption ="Summary of models")
shinyApp(ui, server)
#library(MASS)
library(shiny)
library(ggpubr)
library(limma)
library(dplyr)
library(lmtest)
library(plotly)
#Data Files and prep work
source("../../Scripts/GenPlotMaking.R")
source("../../Scripts/WasteWaterDataProccess.R")
source("../../Scripts/CassesDataProccess.R")
source("../../Scripts/HelperFunctions.R")
PathStarter="Z:/"
LatMMSDFN  <-  paste0(PathStarter,"COVID-19_WastewaterAnalysis/data/raw/MMSD_Cases.csv")
LatSpringDormFN  <-  paste0(PathStarter,"COVID-19_WastewaterAnalysis/data/raw/SpringSemester_CasesByDorm.TSV")
LatFallDormFN  <-  paste0(PathStarter,"COVID-19_WastewaterAnalysis/data/raw/FallSemester_CasesByDorm.TSV")
LIMSFN <- paste0(PathStarter,"COVID-19_WastewaterAnalysis/data/raw/WATERMICRO_WW_COVID-2021-06-30 17 40.xlsx")
HFGCasesFN  <-  paste0(PathStarter,"COVID-19_WastewaterAnalysis/data/raw/HighFreq_CaseData_2021-05-07.csv")
LatCaseDF <- CovidDataPARSER(LatSpringDormFN,LatFallDormFN,MMSDFN = LatMMSDFN)%>%
filter(!is.na(Site))%>%
select(Date,Site,Cases,Tests,Per_pos)
#library(MASS)
library(shiny)
library(ggpubr)
library(limma)
library(dplyr)
library(lmtest)
library(plotly)
#Data Files and prep work
source("../../Scripts/GenPlotMaking.R")
source("../../Scripts/WasteWaterDataProccess.R")
source("../../Scripts/CassesDataProccess.R")
source("../../Scripts/HelperFunctions.R")
PathStarter="Z:/"
LatMMSDFN  <-  paste0(PathStarter,"COVID-19_WastewaterAnalysis/data/raw/MMSD_Cases.csv")
LatSpringDormFN  <-  paste0(PathStarter,"COVID-19_WastewaterAnalysis/data/raw/SpringSemester_CasesByDorm.TSV")
LatFallDormFN  <-  paste0(PathStarter,"COVID-19_WastewaterAnalysis/data/raw/FallSemester_CasesByDorm.TSV")
LIMSFN <- paste0(PathStarter,"COVID-19_WastewaterAnalysis/data/raw/WATERMICRO_WW_COVID-2021-06-30 17 40.xlsx")
HFGCasesFN  <-  paste0(PathStarter,"COVID-19_WastewaterAnalysis/data/raw/HighFreq_CaseData_2021-05-07.csv")
LatCaseDF <- CovidDataPARSER(LatSpringDormFN,LatFallDormFN,MMSDFN = LatMMSDFN)%>%
filter(!is.na(Site))%>%
select(Date,Site,Cases,Tests,Per_pos)
LatCaseDF <- CovidDataPARSER(LatSpringDormFN,LatFallDormFN,MMSDFN = LatMMSDFN)%>%
filter(!is.na(Site))%>%
select(Date,Site,Cases,Tests,Per_pos)
#library(MASS)
library(shiny)
library(ggpubr)
library(limma)
library(dplyr)
library(lmtest)
library(plotly)
#Data Files and prep work
source("../../Scripts/GenPlotMaking.R")
source("../../Scripts/WasteWaterDataProccess.R")
source("../../Scripts/CassesDataProccess.R")
source("../../Scripts/HelperFunctions.R")
PathStarter="Z:/"
LatMMSDFN  <-  paste0(PathStarter,"COVID-19_WastewaterAnalysis/data/raw/MMSD_Cases.csv")
LatSpringDormFN  <-  paste0(PathStarter,"COVID-19_WastewaterAnalysis/data/raw/SpringSemester_CasesByDorm.TSV")
LatFallDormFN  <-  paste0(PathStarter,"COVID-19_WastewaterAnalysis/data/raw/FallSemester_CasesByDorm.TSV")
LIMSFN <- paste0(PathStarter,"COVID-19_WastewaterAnalysis/data/raw/WATERMICRO_WW_COVID-2021-06-30 17 40.xlsx")
HFGCasesFN  <-  paste0(PathStarter,"COVID-19_WastewaterAnalysis/data/raw/HighFreq_CaseData_2021-05-07.csv")
LatCaseDF <- CovidDataPARSER(LatSpringDormFN,LatFallDormFN,MMSDFN = LatMMSDFN)%>%
filter(!is.na(Site))%>%
select(Date,Site,Cases,Tests,Per_pos)
CovidDataPARSER(LatSpringDormFN,LatFallDormFN,MMSDFN = LatMMSDFN)
CovidDataPARSER(LatSpringDormFN,LatFallDormFN,MMSDFN = LatMMSDFN)
CovidDataPARSER
#library(MASS)
library(shiny)
library(ggpubr)
library(limma)
library(dplyr)
library(lmtest)
library(plotly)
#Data Files and prep work
source("../../Scripts/GenPlotMaking.R")
source("../../Scripts/WasteWaterDataProccess.R")
source("../../Scripts/CassesDataProccess.R")
source("../../Scripts/HelperFunctions.R")
PathStarter="Z:/"
LatMMSDFN  <-  paste0(PathStarter,"COVID-19_WastewaterAnalysis/data/raw/MMSD_Cases.csv")
LatSpringDormFN  <-  paste0(PathStarter,"COVID-19_WastewaterAnalysis/data/raw/SpringSemester_CasesByDorm.TSV")
LatFallDormFN  <-  paste0(PathStarter,"COVID-19_WastewaterAnalysis/data/raw/FallSemester_CasesByDorm.TSV")
LIMSFN <- paste0(PathStarter,"COVID-19_WastewaterAnalysis/data/raw/WATERMICRO_WW_COVID-2021-06-30 17 40.xlsx")
HFGCasesFN  <-  paste0(PathStarter,"COVID-19_WastewaterAnalysis/data/raw/HighFreq_CaseData_2021-05-07.csv")
LatCaseDF <- CovidDataPARSER(LatSpringDormFN,LatFallDormFN,MMSDFN = LatMMSDFN)%>%
filter(!is.na(Site))%>%
select(Date,Site,Cases,Tests,Per_pos)
CovidDataPARSER
LatCaseDF <- CovidDataPARSER(LatSpringDormFN,LatFallDormFN,MMSDFN = LatMMSDFN)%>%
filter(!is.na(Site))%>%
select(Date,Site,Cases,Tests,Per_pos)
CovidDataPARSER
CovidDataPARSER(LatSpringDormFN,LatFallDormFN,MMSDFN = LatMMSDFN)
CovidDataPARSER
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
library(ggpubr)
library(tidyverse)
library(forecast)
library(lmtest)
library(lubridate)
library(lme4)
library(lmerTest)
#Data Files and prep work
source("../Scripts/GenPlotMaking.R")
source("../Scripts/WasteWaterDataProccess.R")
source("../Scripts/CassesDataProccess.R")
source("../Scripts/HelperFunctions.R")
PathStarter="Z:/"
SigWasteFN <- paste0(PathStarter,
"COVID-19_WastewaterAnalysis/data/raw/TimeSeriesDataforStats072321.csv")
SigDecayDF <- read.csv(SigWasteFN)%>%
rename(collectionDate = Collection.Date,
FilteredDate = Filtered.Date)%>%
mutate(collectionDate = mdy(collectionDate),
FilteredDate = mdy(FilteredDate),
TimePassed = FilteredDate-collectionDate,
N1.CT = as.numeric(N1.CT))
#
MixedEffectModelSum <- function(DF,Var,Log=TRUE){
if(Log){
depenVar <- paste0("log(",Var,")")
}else{
depenVar <- Var
}
MixedEffectModel <- lmer(as.formula(paste0(depenVar," ~ TimePassed +   (1|WWTP)")),
data = DF)
summary(MixedEffectModel)
}
MixedEffectModelPlot <- function(DF,Var,Title,subtitle,
xlab="Filtered Date",
ylab="N1 (GC/L)",
Log=TRUE){
if(Log){
Var2=paste0("log(",Var,")")
}else{
Var2=Var
}
MixedEffectModel <- lmer(as.formula(paste0(Var2," ~ TimePassed + (1|WWTP)")),
data = DF)
DF3 <- DF%>%
filter(!is.na(!!sym(Var)))
Pvel <- signif(summary(MixedEffectModel)$coefficients[10],4)
if(Log){
DF3$Pred = exp(predict(MixedEffectModel))
}else{
DF3$Pred = predict(MixedEffectModel)
}
FinalGraph <- DF3%>%
mutate(Filter.Replicate=substr(Filter.Replicate,4,6))%>%
ggplot()+
geom_jitter(aes(x=FilteredDate,y=!!sym(Var),
color=Filter.Replicate,
alpha=as.character(Pvel)),
width = .2)+
geom_line(aes(x=FilteredDate,y=Pred))+
facet_wrap(~WWTP,nrow = 3)+
labs(y=ylab,
x=xlab,
color = "Filter Replicate",
title=Title,
subtitle=subtitle)+
scale_alpha_manual(values=c(1),labels = c(Pvel),name=expression(p[slope]),guide = 'legend')
if (Log){
FinalGraph <- FinalGraph+
scale_y_log10()
}
return(FinalGraph)
}
regressions_data <- function(Var,DF){
DF%>%
#mutate(Filter.Replicate=substr(Filter.Replicate,4,6))%>%
group_by(WWTP)%>%
summarise(PVal=signif(summary(lm(!!sym(Var)~TimePassed))$coefficients[8], digits = 3))
}
#ggplot latex? subscripts p_slope
DecayPlot <- function(Var,DF,Locate=c(18729,14,25,20),Log=TRUE){
GraphPlot <- DF%>%
mutate(Filter.Replicate=substr(Filter.Replicate,4,6))%>%
ggplot()+
aes(x=FilteredDate,y=!!sym(Var))+#,color=Filter.Replicate)+
geom_label(inherit.aes=FALSE,
aes(x = as.Date(Locate[1]-Locate[2]*abs(as.numeric(as.factor(WWTP))-2)),
y = Locate[3],
label=paste("p[slope]","==",  PVal)),
size=4,
show.legend = FALSE,
parse = TRUE,
data=regressions_data(Var,DF))+
geom_jitter(width = .2)+
geom_smooth(method = "lm", se=FALSE)+
labs(x="Filtered Date",y=Var,color="Filter Replicate")+
facet_wrap(~WWTP,nrow=3)
if(Log){
GraphPlot <- GraphPlot+
scale_y_log10()
}
return(GraphPlot)
}
SigDecayDF2 <- SigDecayDF%>%
mutate(N12=N1.GC.L+N2.GC.L)
MixedEffectModelPlot(SigDecayDF, Var = "N1.GC.L",
Title="",subtitle="",
xlab="Figure 1. Mixed-effects model.",
ylab="N1 (GC/L)")
DecayPlot("N1.GC.L",SigDecayDF2)+
labs(x="Figure 2. Six independent linear regressions.",
y="N1 (GC/L)")
SigDecayDF2 <- SigDecayDF%>%
filter(!(WWTP=="WI Rapids"))#&Filter.Replicate=="Rep A"))
SigDecayDF3 <- SigDecayDF%>%
filter(!(WWTP=="Madison"&Filter.Replicate=="Rep A"))
MixedEffectModelPlot(SigDecayDF2,Var = "N1.GC.L",
Title="",
subtitle="",
xlab="Figure 3. Mixed-effects model excluding WI Rapids filter replicate A",
ylab="N1 (GC/L)")
#overlay PMMoV vs N1
#compare slope of different models and SE
#looking at delay in measuring as a way to control LIMS signal
#what model used comes down to formulating what the goal is
#Brian: early august - students coming back - want to be done asap - where we are report useful in that place
#should we devote resources for collection
#make simplest thing to show
#back apply to remove error
#might explain issues
#see relationship between time and difference between testing and collection
#Focus on removing heuristics
#rigorous analysis
#include N1+N2
#N2 are messy with delay
#constant picture between N1 and Pmmov-show that
#2)code review isc conversation
#by early monday lets have something that tells story
#lets have something put together by monday
library(knitr)
library(printr)
#This process was repeated with N2 with no significance.
MixedEffectModelPlot(SigDecayDF, Var = "N2.GC.L",
Title="",subtitle="",
xlab="Figure 1. Mixed-effects model.",
ylab="N2 (GC/L)")
DecayPlot("N2.GC.L",SigDecayDF)+
labs(x="Figure 2. Six independent linear regressions.",
y="N2 (GC/L)")
MixedEffectModelPlot(SigDecayDF2,Var = "N2.GC.L",
Title="",
subtitle="",
xlab="Figure 3. Mixed-effects model excluding WI Rapids filter replicate A",
ylab="N2 (GC/L)")
# When the mixed model is fitted for PMMoV we find a much stronger picture indicating an exponential decay relationship.
MixedEffectModelPlot(SigDecayDF, Var = "PMMoV.GC.L",
Title="",subtitle="",
xlab="Figure 1. Mixed-effects model.",
ylab="PMMoV (GC/L)")
DecayPlot("PMMoV.GC.L",SigDecayDF,
Locate=c(18729,14,5000,2000))+
labs(x="Figure 2. Six independent linear regressions.",
y="PMMoV (GC/L)")
MixedEffectModelPlot(SigDecayDF2,Var = "PMMoV.GC.L",
Title="",
subtitle="",
xlab="Figure 3. Mixed-effects model excluding WI Rapids filter replicate A",
ylab="PMMoV (GC/L)")
MixedEffectModelPlot(SigDecayDF, Var = "BCoV.percent.recovery",
Title="",subtitle="",
xlab="Figure 1. Mixed-effects model.",
ylab="Percent bovine coronavirus recovery",
Log=FALSE)
DecayPlot("BCoV.percent.recovery",SigDecayDF,
Log=FALSE,
Locate=c(18729,14,10,5))+
labs(x="Figure 2. Six independent linear regressions.",
y="Percent bovine coronavirus recovery")
MixedEffectModelPlot(SigDecayDF3,Var = "BCoV.percent.recovery",
Title="",
subtitle="",
xlab="Figure 3. Mixed-effects model excluding WI Rapids filter replicate A",
ylab="Percent bovine coronavirus recovery",
Log=FALSE)
`N1 using six replicates` <- MixedEffectModelSum(SigDecayDF,"N1.GC.L")[[10]][2,c(1,2,5)]
`N1 excluding WI Rapids rep A` <- MixedEffectModelSum(SigDecayDF2,"N1.GC.L")[[10]][2,c(1,2,5)]
`N2 using six replicates` <- MixedEffectModelSum(SigDecayDF,"N2.GC.L")[[10]][2,c(1,2,5)]
`N2 excluding WI Rapids rep A` <- MixedEffectModelSum(SigDecayDF2,"N2.GC.L")[[10]][2,c(1,2,5)]
`PMMoV using six replicates` <- MixedEffectModelSum(SigDecayDF,"PMMoV.GC.L")[[10]][2,c(1,2,5)]
`PMMoV excluding WI Rapids rep A` <- MixedEffectModelSum(SigDecayDF2,"PMMoV.GC.L")[[10]][2,c(1,2,5)]
`BCoV using six replicates` <- MixedEffectModelSum(SigDecayDF,"BCoV.percent.recovery",Log=FALSE)[[10]][2,c(1,2,5)]
`BCoV excluding Madison rep A` <- MixedEffectModelSum(SigDecayDF2,"BCoV.percent.recovery",Log=FALSE)[[10]][2,c(1,2,5)]
FinalTable <- signif(rbind(`N1 using six replicates`,
`N1 excluding WI Rapids rep A`,
`N2 using six replicates`,
`N2 excluding WI Rapids rep A`,
`PMMoV using six replicates`,
`PMMoV excluding WI Rapids rep A`,
`BCoV using six replicates`,
`BCoV excluding Madison rep A`
),2)
#put log in math notation
#Var in
#sub table
#include slope in graph
#log linear model estimating degergation rate
#Note madison weirdness with star or dag and describe in footnote
#Mark BCoV as non log
#exlude mad because only 2 non 0 data points
colnames(FinalTable) <- c("Decay Rate","SE","P")
knitr::kable(FinalTable,
caption ="Summary of models")
MixedEffectModelPlot(SigDecayDF, Var = "BCoV.percent.recovery",
Title="",subtitle="",
xlab="Figure 1. Mixed-effects model.",
ylab="Percent bovine coronavirus recovery",
Log=FALSE)
DecayPlot("BCoV.percent.recovery",SigDecayDF,
Log=FALSE,
Locate=c(18729,14,10,5))+
labs(x="Figure 2. Six independent linear regressions.",
y="Percent bovine coronavirus recovery")
MixedEffectModelPlot(SigDecayDF3,Var = "BCoV.percent.recovery",
Title="",
subtitle="",
xlab="Figure 3. Mixed-effects model excluding WI Rapids filter replicate A",
ylab="Percent bovine coronavirus recovery",
Log=FALSE)
#ggplot latex? subscripts p_slope
DecayPlot <- function(Var,DF,Locate=c(18729,14,25,20),Log=TRUE){
GraphPlot <- DF%>%
mutate(Filter.Replicate=substr(Filter.Replicate,4,6))%>%
ggplot()+
aes(x=FilteredDate,y=!!sym(Var))+#,color=Filter.Replicate)+
geom_label(inherit.aes=FALSE,
aes(x = as.Date(Locate[1]-Locate[2]*abs(as.numeric(as.factor(WWTP))-2)),
y = Locate[3],
label=paste("p[slope]","==",  PVal)),
size=4,
show.legend = FALSE,
parse = TRUE,
data=regressions_data(Var,DF))+
geom_jitter(aes(color=Filter.Replicate),width = .2)+
geom_smooth(method = "lm", se=FALSE)+
labs(x="Filtered Date",y=Var,color="Filter Replicate")+
facet_wrap(~WWTP,nrow=3)
if(Log){
GraphPlot <- GraphPlot+
scale_y_log10()
}
return(GraphPlot)
}
SigDecayDF2 <- SigDecayDF%>%
mutate(N12=N1.GC.L+N2.GC.L)
MixedEffectModelPlot(SigDecayDF, Var = "N1.GC.L",
Title="",subtitle="",
xlab="Figure 1. Mixed-effects model.",
ylab="N1 (GC/L)")
DecayPlot("N1.GC.L",SigDecayDF2)+
labs(x="Figure 2. Six independent linear regressions.",
y="N1 (GC/L)")
SigDecayDF2 <- SigDecayDF%>%
filter(!(WWTP=="WI Rapids"))#&Filter.Replicate=="Rep A"))
SigDecayDF3 <- SigDecayDF%>%
filter(!(WWTP=="Madison"&Filter.Replicate=="Rep A"))
MixedEffectModelPlot(SigDecayDF2,Var = "N1.GC.L",
Title="",
subtitle="",
xlab="Figure 3. Mixed-effects model excluding WI Rapids filter replicate A",
ylab="N1 (GC/L)")
#overlay PMMoV vs N1
#compare slope of different models and SE
#looking at delay in measuring as a way to control LIMS signal
#what model used comes down to formulating what the goal is
#Brian: early august - students coming back - want to be done asap - where we are report useful in that place
#should we devote resources for collection
#make simplest thing to show
#back apply to remove error
#might explain issues
#see relationship between time and difference between testing and collection
#Focus on removing heuristics
#rigorous analysis
#include N1+N2
#N2 are messy with delay
#constant picture between N1 and Pmmov-show that
#2)code review isc conversation
#by early monday lets have something that tells story
#lets have something put together by monday
library(knitr)
library(printr)
MixedEffectModelPlot(SigDecayDF, Var = "N2.GC.L",
Title="",subtitle="",
xlab="Figure 1. Mixed-effects model.",
ylab="N2 (GC/L)")
DecayPlot("N2.GC.L",SigDecayDF)+
labs(x="Figure 2. Six independent linear regressions.",
y="N2 (GC/L)")
MixedEffectModelPlot(SigDecayDF2,Var = "N2.GC.L",
Title="",
subtitle="",
xlab="Figure 3. Mixed-effects model excluding WI Rapids filter replicate A",
ylab="N2 (GC/L)")
MixedEffectModelPlot(SigDecayDF, Var = "PMMoV.GC.L",
Title="",subtitle="",
xlab="Figure 1. Mixed-effects model.",
ylab="PMMoV (GC/L)")
DecayPlot("PMMoV.GC.L",SigDecayDF,
Locate=c(18729,14,5000,2000))+
labs(x="Figure 2. Six independent linear regressions.",
y="PMMoV (GC/L)")
MixedEffectModelPlot(SigDecayDF2,Var = "PMMoV.GC.L",
Title="",
subtitle="",
xlab="Figure 3. Mixed-effects model excluding WI Rapids filter replicate A",
ylab="PMMoV (GC/L)")
MixedEffectModelPlot(SigDecayDF, Var = "BCoV.percent.recovery",
Title="",subtitle="",
xlab="Figure 1. Mixed-effects model.",
ylab="Percent bovine coronavirus recovery",
Log=FALSE)
DecayPlot("BCoV.percent.recovery",SigDecayDF,
Log=FALSE,
Locate=c(18729,14,10,5))+
labs(x="Figure 2. Six independent linear regressions.",
y="Percent bovine coronavirus recovery")
MixedEffectModelPlot(SigDecayDF3,Var = "BCoV.percent.recovery",
Title="",
subtitle="",
xlab="Figure 3. Mixed-effects model excluding WI Rapids filter replicate A",
ylab="Percent bovine coronavirus recovery",
Log=FALSE)
`N1 using six replicates` <- MixedEffectModelSum(SigDecayDF,"N1.GC.L")[[10]][2,c(1,2,5)]
`N1 excluding WI Rapids rep A` <- MixedEffectModelSum(SigDecayDF2,"N1.GC.L")[[10]][2,c(1,2,5)]
`N2 using six replicates` <- MixedEffectModelSum(SigDecayDF,"N2.GC.L")[[10]][2,c(1,2,5)]
`N2 excluding WI Rapids rep A` <- MixedEffectModelSum(SigDecayDF2,"N2.GC.L")[[10]][2,c(1,2,5)]
`PMMoV using six replicates` <- MixedEffectModelSum(SigDecayDF,"PMMoV.GC.L")[[10]][2,c(1,2,5)]
`PMMoV excluding WI Rapids rep A` <- MixedEffectModelSum(SigDecayDF2,"PMMoV.GC.L")[[10]][2,c(1,2,5)]
`BCoV using six replicates` <- MixedEffectModelSum(SigDecayDF,"BCoV.percent.recovery",Log=FALSE)[[10]][2,c(1,2,5)]
`BCoV excluding Madison rep A` <- MixedEffectModelSum(SigDecayDF2,"BCoV.percent.recovery",Log=FALSE)[[10]][2,c(1,2,5)]
FinalTable <- signif(rbind(`N1 using six replicates`,
`N1 excluding WI Rapids rep A`,
`N2 using six replicates`,
`N2 excluding WI Rapids rep A`,
`PMMoV using six replicates`,
`PMMoV excluding WI Rapids rep A`,
`BCoV using six replicates`,
`BCoV excluding Madison rep A`
),2)
#put log in math notation
#Var in
#sub table
#include slope in graph
#log linear model estimating degergation rate
#Note madison weirdness with star or dag and describe in footnote
#Mark BCoV as non log
#exlude mad because only 2 non 0 data points
colnames(FinalTable) <- c("Decay Rate","SE","P")
knitr::kable(FinalTable,
caption ="Summary of models")
FullCaseRoll%>%
filter(Site=="Madison",
Date>mdy("9/15/2020"))%>%
ggplot()+
aes(x=Date)+
geom_smooth(aes(y=Cases),se=F,span=.2)
DecLIMSFullDF2%>%
ggplot()+
aes(x=collected)+#,color=Outliers)+
geom_smooth(aes(y=N1),se=F,span=.2)+
scale_y_log10()
auto.arima(SLDPreRolledVec)
auto.arima(SLDPreRolledVec)
plot(auto.arima(SLDPreRolledVec))
plot(predict(auto.arima(SLDPreRolledVec)))
plot(predict(auto.arima(SLDPreRolledVec)))
plot(predict.ts(auto.arima(SLDPreRolledVec)))
predic(auto.arima(SLDPreRolledVec))
predict(auto.arima(SLDPreRolledVec))
plot(predict(auto.arima(SLDPreRolledVec))$pred)
predict(auto.arima(SLDPreRolledVec))$pred
FullCaseRoll%>%
filter(Site=="Madison",
Date>mdy("9/15/2020"))%>%
ggplot()+
aes(x=Date)+
geom_smooth(aes(y=Cases),se=F,span=.2)
DecLIMSFullDF2%>%
ggplot()+
aes(x=collected)+#,color=Outliers)+
geom_smooth(aes(y=N1),se=F,span=.2)+
scale_y_log10()
FullCase%>%
filter(Site=="Madison",
Date>mdy("9/15/2020"))%>%
ggplot()+
aes(x=Date)+
geom_smooth(aes(y=Tests,color="Tests"),se=F,span=.2)+
geom_smooth(aes(y=Cases,color="Cases"),se=F,span=.2)+
geom_smooth(aes(y=Per_pos,color="Per_pos"),se=F,span=.2)+
scale_y_log10()
N1Rel <- SLDGraphics("Madison",log(SLDPreRolledVec),(loessN1Vec),"SLD","log(N1)")
