coord_flip() +
theme(
legend.position="bottom",
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
inc_MSE
#'
#' @param tree_model random_linear_forest object you want the MSE of
#'
#' @return data.frame containing each column and its MSE increase
#' @export
#'
#' @examples
#' data("example_data", package = "DSIWastewater")
#' model <- random_linear_forest(example_data, 2, PMMoV ~ N1 + N2 | date + site)
#' gen_OOB_pred(model)
gen_INCMSE <- function(tree_model){
model_list <- tree_model@models
oob_data_list <- tree_model@oob_data
col_names <- names(tree_model@data)
ret_DF_list <- list()
base_MSE <- gen_OOB_pred(tree_model)%>%
mutate(across(starts_with("pred_"), ~ (conf_case - .x)**2))%>%
summarise(across(starts_with("pred_"), ~ mean(.x, na.rm = TRUE)))
for(i in 3:(length(col_names))){
I_MSE <- gen_OOB_pred(tree_model,
incMSE = col_names[i])%>%
mutate(across(starts_with("pred_"), ~ (conf_case - .x**2)))%>%
summarise(across(starts_with("pred_"), ~ mean(.x, na.rm = TRUE)))
diff_vector = as.numeric(base_MSE[1,]) - as.numeric(I_MSE[1,])
ret_DF_list[[i - 2]] <- data.frame(
incMSE = 100*mean(diff_vector, na.rm = TRUE)/sd(diff_vector, na.rm = TRUE),
men = mean(diff_vector, na.rm = TRUE),
sd = sd(diff_vector, na.rm = TRUE),
var = col_names[i])
}
ret <- bind_rows(ret_DF_list)
return(ret)
}
inc_MSE <- gen_INCMSE(forest_model)
#reran model
#or
ggplot(inc_MSE, aes(x = var, y = incMSE)) +
geom_segment( aes(x=var, xend=var, y = 0, yend=incMSE), color="skyblue") +
theme_light() +
coord_flip() +
theme(
legend.position="bottom",
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
inc_MSE
gen_OOB_pred(forest_model)%>%
mutate(across(starts_with("pred_"), ~ (conf_case - .x)**2))%>%
summarise(across(starts_with("pred_"), ~ mean(.x, na.rm = TRUE)))
base <- gen_OOB_pred(forest_model)%>%
mutate(across(starts_with("pred_"), ~ (conf_case - .x)**2))%>%
summarise(across(starts_with("pred_"), ~ mean(.x, na.rm = TRUE)))
I_MSE <- gen_OOB_pred(forest_model,
incMSE = col_names[4])%>%
mutate(across(starts_with("pred_"), ~ (conf_case - .x**2)))%>%
summarise(across(starts_with("pred_"), ~ mean(.x, na.rm = TRUE)))
I_MSE <- gen_OOB_pred(forest_model,
incMSE = names(tree_model@data)[4])%>%
mutate(across(starts_with("pred_"), ~ (conf_case - .x**2)))%>%
summarise(across(starts_with("pred_"), ~ mean(.x, na.rm = TRUE)))
I_MSE <- gen_OOB_pred(forest_model,
incMSE = names(forest_model@data)[4])%>%
mutate(across(starts_with("pred_"), ~ (conf_case - .x**2)))%>%
summarise(across(starts_with("pred_"), ~ mean(.x, na.rm = TRUE)))
I_MSE
#'
#' @param tree_model random_linear_forest object you want the MSE of
#'
#' @return data.frame containing each column and its MSE increase
#' @export
#'
#' @examples
#' data("example_data", package = "DSIWastewater")
#' model <- random_linear_forest(example_data, 2, PMMoV ~ N1 + N2 | date + site)
#' gen_OOB_pred(model)
gen_INCMSE <- function(tree_model){
model_list <- tree_model@models
oob_data_list <- tree_model@oob_data
col_names <- names(tree_model@data)
ret_DF_list <- list()
base_MSE <- gen_OOB_pred(tree_model)%>%
mutate(across(starts_with("pred_"), ~ (conf_case - .x)**2))%>%
summarise(across(starts_with("pred_"), ~ mean(.x, na.rm = TRUE)))
for(i in 3:(length(col_names))){
I_MSE <- gen_OOB_pred(tree_model,
incMSE = col_names[i])%>%
mutate(across(starts_with("pred_"), ~ (conf_case - .x)**2))%>%
summarise(across(starts_with("pred_"), ~ mean(.x, na.rm = TRUE)))
diff_vector = as.numeric(base_MSE[1,]) - as.numeric(I_MSE[1,])
ret_DF_list[[i - 2]] <- data.frame(
incMSE = 100*mean(diff_vector, na.rm = TRUE)/sd(diff_vector, na.rm = TRUE),
men = mean(diff_vector, na.rm = TRUE),
sd = sd(diff_vector, na.rm = TRUE),
var = col_names[i])
}
ret <- bind_rows(ret_DF_list)
return(ret)
}
I_MSE <- gen_OOB_pred(forest_model,
incMSE = names(forest_model@data)[4])%>%
mutate(across(starts_with("pred_"), ~ (conf_case - .x)**2))%>%
summarise(across(starts_with("pred_"), ~ mean(.x, na.rm = TRUE)))
I_MSE
inc_MSE <- gen_INCMSE(forest_model)
#reran model
#or
ggplot(inc_MSE, aes(x = var, y = incMSE)) +
geom_segment( aes(x=var, xend=var, y = 0, yend=incMSE), color="skyblue") +
theme_light() +
coord_flip() +
theme(
legend.position="bottom",
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
inc_MSE
#'
#' @param tree_model random_linear_forest object you want the MSE of
#'
#' @return data.frame containing each column and its MSE increase
#' @export
#'
#' @examples
#' data("example_data", package = "DSIWastewater")
#' model <- random_linear_forest(example_data, 2, PMMoV ~ N1 + N2 | date + site)
#' gen_OOB_pred(model)
gen_INCMSE <- function(tree_model){
model_list <- tree_model@models
oob_data_list <- tree_model@oob_data
col_names <- names(tree_model@data)
ret_DF_list <- list()
base_MSE <- gen_OOB_pred(tree_model)%>%
mutate(across(starts_with("pred_"), ~ (conf_case - .x)**2))%>%
summarise(across(starts_with("pred_"), ~ mean(.x, na.rm = TRUE)))
for(i in 3:(length(col_names))){
I_MSE <- gen_OOB_pred(tree_model,
incMSE = col_names[i])%>%
mutate(across(starts_with("pred_"), ~ (conf_case - .x)**2))%>%
summarise(across(starts_with("pred_"), ~ mean(.x, na.rm = TRUE)))
diff_vector = as.numeric(base_MSE[1,]) - as.numeric(I_MSE[1,])
ret_DF_list[[i - 2]] <- data.frame(
incMSE = 100*mean(diff_vector, na.rm = TRUE)/sd(diff_vector, na.rm = TRUE),
men = mean(diff_vector, na.rm = TRUE),
sd = sd(diff_vector, na.rm = TRUE),
var = col_names[i])
}
ret <- bind_rows(ret_DF_list)
return(ret)
}
inc_MSE <- gen_INCMSE(forest_model)
#reran model
#or
ggplot(inc_MSE, aes(x = var, y = incMSE)) +
geom_segment( aes(x=var, xend=var, y = 0, yend=incMSE), color="skyblue") +
theme_light() +
coord_flip() +
theme(
legend.position="bottom",
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
inc_MSE
#'
#' @param tree_model random_linear_forest object you want the MSE of
#'
#' @return data.frame containing each column and its MSE increase
#' @export
#'
#' @examples
#' data("example_data", package = "DSIWastewater")
#' model <- random_linear_forest(example_data, 2, PMMoV ~ N1 + N2 | date + site)
#' gen_OOB_pred(model)
gen_INCMSE <- function(tree_model){
model_list <- tree_model@models
oob_data_list <- tree_model@oob_data
col_names <- names(tree_model@data)
ret_DF_list <- list()
base_MSE <- gen_OOB_pred(tree_model)%>%
mutate(across(starts_with("pred_"), ~ (conf_case - .x)**2))%>%
summarise(across(starts_with("pred_"), ~ mean(.x, na.rm = TRUE)))
for(i in 3:(length(col_names))){
I_MSE <- gen_OOB_pred(tree_model,
incMSE = col_names[i])%>%
mutate(across(starts_with("pred_"), ~ (conf_case - .x)**2))%>%
summarise(across(starts_with("pred_"), ~ mean(.x, na.rm = TRUE)))
diff_vector = as.numeric(base_MSE[1,]) - as.numeric(I_MSE[1,])
ret_DF_list[[i - 2]] <- data.frame(
incMSE = 100*mean(diff_vector, na.rm = TRUE)/sd(diff_vector, na.rm = TRUE),
men = mean(diff_vector, na.rm = TRUE),
sd = sd(diff_vector, na.rm = TRUE),
var = col_names[i])
}
ret <- bind_rows(ret_DF_list)
return(ret)
}
inc_MSE <- gen_INCMSE(forest_model)
#reran model
#or
ggplot(inc_MSE, aes(x = var, y = incMSE)) +
geom_segment( aes(x=var, xend=var, y = 0, yend=incMSE), color="skyblue") +
theme_light() +
coord_flip() +
theme(
legend.position="bottom",
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
inc_MSE
base_MSE <- gen_OOB_pred(forest_model)%>%
mutate(across(starts_with("pred_"), ~ (conf_case - .x)**2))%>%
summarise(across(starts_with("pred_"), ~ mean(.x, na.rm = TRUE)))
I_MSE <- gen_OOB_pred(forest_model, incMSE = names(forest_model@data)[5])%>%
mutate(across(starts_with("pred_"), ~ (conf_case - .x)**2))%>%
summarise(across(starts_with("pred_"), ~ mean(.x, na.rm = TRUE)))
base_MSE
I_MSE
#'
#' @param tree_model random_linear_forest object you want the MSE of
#'
#' @return data.frame containing each column and its MSE increase
#' @export
#'
#' @examples
#' data("example_data", package = "DSIWastewater")
#' model <- random_linear_forest(example_data, 2, PMMoV ~ N1 + N2 | date + site)
#' gen_OOB_pred(model)
gen_INCMSE <- function(tree_model){
model_list <- tree_model@models
oob_data_list <- tree_model@oob_data
col_names <- names(tree_model@data)
ret_DF_list <- list()
base_MSE <- gen_OOB_pred(tree_model)%>%
mutate(across(starts_with("pred_"), ~ (conf_case - .x)**2))%>%
summarise(across(starts_with("pred_"), ~ mean(.x, na.rm = TRUE)))
for(i in 3:(length(col_names))){
I_MSE <- gen_OOB_pred(tree_model,
incMSE = col_names[i])%>%
mutate(across(starts_with("pred_"), ~ (conf_case - .x)**2))%>%
summarise(across(starts_with("pred_"), ~ mean(.x, na.rm = TRUE)))
diff_vector = as.numeric(I_MSE[1,]) - as.numeric(base_MSE[1,])
ret_DF_list[[i - 2]] <- data.frame(
incMSE = 100*mean(diff_vector, na.rm = TRUE)/sd(diff_vector, na.rm = TRUE),
men = mean(diff_vector, na.rm = TRUE),
sd = sd(diff_vector, na.rm = TRUE),
var = col_names[i])
}
ret <- bind_rows(ret_DF_list)
return(ret)
}
inc_MSE <- gen_INCMSE(forest_model)
#reran model
#or
ggplot(inc_MSE, aes(x = var, y = incMSE)) +
geom_segment( aes(x=var, xend=var, y = 0, yend=incMSE), color="skyblue") +
theme_light() +
coord_flip() +
theme(
legend.position="bottom",
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
inc_MSE
#'
#' @param tree_model random_linear_forest object you want the MSE of
#'
#' @return data.frame containing each column and its MSE increase
#' @export
#'
#' @examples
#' data("example_data", package = "DSIWastewater")
#' model <- random_linear_forest(example_data, 2, PMMoV ~ N1 + N2 | date + site)
#' gen_OOB_pred(model)
gen_INCMSE <- function(tree_model){
model_list <- tree_model@models
oob_data_list <- tree_model@oob_data
col_names <- names(tree_model@data)
ret_DF_list <- list()
base_MSE <- gen_OOB_pred(tree_model)%>%
mutate(across(starts_with("pred_"), ~ (conf_case - .x)**2))%>%
summarise(across(starts_with("pred_"), ~ mean(.x, na.rm = TRUE)))
for(i in 3:(length(col_names))){
I_MSE <- gen_OOB_pred(tree_model,
incMSE = col_names[i])%>%
mutate(across(starts_with("pred_"), ~ (conf_case - .x)**2))%>%
summarise(across(starts_with("pred_"), ~ mean(.x, na.rm = TRUE)))
diff_vector = as.numeric(I_MSE[1,]) - as.numeric(base_MSE[1,])
ret_DF_list[[i - 2]] <- data.frame(
incMSE = 100*mean(diff_vector, na.rm = TRUE)/sd(diff_vector, na.rm = TRUE),
old_incMSE = 100*mean(diff_vector, na.rm = TRUE)/mean(as.numeric(base_MSE[1,])),
men = mean(diff_vector, na.rm = TRUE),
sd = sd(diff_vector, na.rm = TRUE),
var = col_names[i])
}
ret <- bind_rows(ret_DF_list)
return(ret)
}
inc_MSE <- gen_INCMSE(forest_model)
#reran model
#or
ggplot(inc_MSE, aes(x = var, y = incMSE)) +
geom_segment( aes(x=var, xend=var, y = 0, yend=incMSE), color="skyblue") +
theme_light() +
coord_flip() +
theme(
legend.position="bottom",
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
inc_MSE
ggplot(inc_MSE, aes(x = var, y = incMSE)) +
geom_segment( aes(x=var-.5, xend=var+.5, y = 0, yend=incMSE), color="skyblue") +
theme_light() +
coord_flip() +
theme(
legend.position="bottom",
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
ggplot(inc_MSE, aes(x = var, y = incMSE)) +
geom_segment( aes(x=var-.25, xend=var+.25, y = 0, yend=incMSE), color="skyblue") +
theme_light() +
coord_flip() +
theme(
legend.position="bottom",
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
ggplot(inc_MSE, aes(x = var, y = incMSE)) +
geom_segment( aes(x=var, xend=var, y = 0, yend=incMSE), color="skyblue") +
theme_light() +
coord_flip() +
theme(
legend.position="bottom",
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
?lmtree
ggplot(inc_MSE, aes(x = var, y = incMSE)) +
geom_segment( aes(x=var, xend=var, y = 0, yend=incMSE), color="skyblue") +
geom_point(aes(size = incMSE), color="blue", alpha=0.6) +
theme_light() +
coord_flip() +
theme(
legend.position="bottom",
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
ggplot(inc_MSE, aes(x = var, y = incMSE)) +
geom_segment( aes(x=var, xend=var, y = 0, yend=incMSE), color="skyblue") +
geom_point(aes(size = incMSE), color="blue", alpha=0.6, legend = FALSE) +
theme_light() +
coord_flip() +
theme(
legend.position="bottom",
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
inc_MSE
ggplot(inc_MSE, aes(x = var, y = incMSE)) +
geom_segment( aes(x=var, xend=var, y = 0, yend=incMSE), color="skyblue") +
geom_point(aes(size = old_incMSE), color="blue", alpha=0.6, legend = FALSE) +
theme_light() +
coord_flip() +
theme(
legend.position="bottom",
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
inc_MSE
library(devtools)
Move_struct_R <- function(start){
unlink("R", recursive = T, force = T)
dir.create("R")
to_move_files <- list.files(path = start, recursive = TRUE)
for(file in to_move_files){
file_type = strsplit(file, "/")[[1]]
if(file_type[1] == "meta"){
file.copy(from = paste0(start,"/",file), "R")
}else{
file.copy(from = paste0(start,"/",file),
to = paste0("R/",file_type[1],"--",file_type[2]))
}
}
}
QuickUpdate <- function(){
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
Move_struct_R("struct_R")
document()
build(path = ".", vignettes = FALSE)
#devtools::install_github("AFIDSI/DSIWastewater")
install(quick=FALSE)
}
LongUpdate <- function(){
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
Move_struct_R("struct_R")
build_vignettes(quiet=FALSE)
dir.create("inst/doc", recursive = TRUE)
file.copy(dir("doc", full.names=TRUE), "inst/doc", overwrite=TRUE)
file.remove("DSIWastewater_0.2.01.tar.gz")
QuickUpdate()
check(args = c("--no-tests"), vignettes = FALSE)
test()
unlink("R/*", recursive = T, force = T)
}
QuickUpdate()
#Move_struct_R(struct_R)
#vignette(package = "DSIWastewater")
#vignette("vignettes_DHSTopLevelAnalysis_Outlier")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message=FALSE)
library(DSIWastewater)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message=FALSE)
library(DSIWastewater)
QuickUpdate()
library(devtools)
Move_struct_R <- function(start){
unlink("R", recursive = T, force = T)
dir.create("R")
to_move_files <- list.files(path = start, recursive = TRUE)
for(file in to_move_files){
file_type = strsplit(file, "/")[[1]]
if(file_type[1] == "meta"){
file.copy(from = paste0(start,"/",file), "R")
}else{
file.copy(from = paste0(start,"/",file),
to = paste0("R/",file_type[1],"--",file_type[2]))
}
}
}
QuickUpdate <- function(){
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
Move_struct_R("struct_R")
document()
build(path = ".", vignettes = FALSE)
#devtools::install_github("AFIDSI/DSIWastewater")
install(quick=FALSE)
}
LongUpdate <- function(){
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
Move_struct_R("struct_R")
build_vignettes(quiet=FALSE)
dir.create("inst/doc", recursive = TRUE)
file.copy(dir("doc", full.names=TRUE), "inst/doc", overwrite=TRUE)
file.remove("DSIWastewater_0.2.01.tar.gz")
QuickUpdate()
check(args = c("--no-tests"), vignettes = FALSE)
test()
unlink("R/*", recursive = T, force = T)
}
QuickUpdate()
library(devtools)
Move_struct_R <- function(start){
unlink("R", recursive = T, force = T)
dir.create("R")
to_move_files <- list.files(path = start, recursive = TRUE)
for(file in to_move_files){
file_type = strsplit(file, "/")[[1]]
if(file_type[1] == "meta"){
file.copy(from = paste0(start,"/",file), "R")
}else{
file.copy(from = paste0(start,"/",file),
to = paste0("R/",file_type[1],"--",file_type[2]))
}
}
}
QuickUpdate <- function(){
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
Move_struct_R("struct_R")
document()
build(path = ".", vignettes = FALSE)
#devtools::install_github("AFIDSI/DSIWastewater")
install(quick=FALSE)
}
LongUpdate <- function(){
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
Move_struct_R("struct_R")
build_vignettes(quiet=FALSE)
dir.create("inst/doc", recursive = TRUE)
file.copy(dir("doc", full.names=TRUE), "inst/doc", overwrite=TRUE)
file.remove("DSIWastewater_0.2.01.tar.gz")
QuickUpdate()
check(args = c("--no-tests"), vignettes = FALSE)
test()
unlink("R/*", recursive = T, force = T)
}
QuickUpdate()
#devtools::install_github("AFIDSI/DSIWastewater")
install(quick=FALSE)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message=FALSE)
library(DSIWastewater)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message=FALSE)
library(DSIWastewater)
install(quick=FALSE)
