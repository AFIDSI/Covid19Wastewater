??print.forst
??print.random.forest
??print.random.forest
??print.randomforest
??print.randomForest
library(randomForest)
print.randomForest
print.randomForest
print.randomForest
print.randomForest
print.randomForest
print.randomForest
print
print.randomForest
print.randomForest
UseMethod(print, randomForest)
UseMethod("print", randomForest)
UseMethod("print", "randomForest")
formula
#'
#' @param random_linear_forest
#'
#' @return summary.random_linear_forest object
#' @export
#'
#' @examples
#' data("example_data", package = "DSIWastewater")
#' model <- random_linear_forest(PMMoV ~ N1 + N2 | date + site)
#' summary(model)
setMethod(f = "summary",
signature = "random_linear_forest",
#currently just a list version of the show method
#can be expanded to have more info in the future
function(object){
MSE <- mean((object@resid)**2, na.rm = TRUE)
ans <- list()
ans[[1]] <- object@formula
ans[[2]] <- paste("size of data:", nrow(object@data))
ans[[3]] <- paste("Number of trees:", length(object@models))
ans[[4]] <- paste("Mean of squared residuals:", MSE)
ans[[5]] <- paste("% Var explained:",
1 - MSE/var(object@data$case_rate,na.rm = TRUE))
class(ans) <- "summary.random_linear_forest"
return(ans)
})
library(devtools)
Move_struct_R <- function(start){
unlink("R", recursive = T, force = T)
dir.create("R")
to_move_files <- list.files(path = start, recursive = TRUE)
for(file in to_move_files){
file_type = strsplit(file, "/")[[1]]
if(file_type[1] == "meta"){
file.copy(from = paste0(start,"/",file), "R")
}else{
file.copy(from = paste0(start,"/",file),
to = paste0("R/",file_type[1],"--",file_type[2]))
}
}
}
QuickUpdate <- function(){
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
Move_struct_R("struct_R")
document()
build(path = ".", vignettes = FALSE)
#devtools::install_github("AFIDSI/DSIWastewater")
install(quick=FALSE)
}
LongUpdate <- function(){
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
Move_struct_R("struct_R")
build_vignettes(quiet=FALSE)
dir.create("inst/doc", recursive = TRUE)
file.copy(dir("doc", full.names=TRUE), "inst/doc", overwrite=TRUE)
file.remove("DSIWastewater_0.2.01.tar.gz")
QuickUpdate()
check(args = c("--no-tests"), vignettes = FALSE)
test()
unlink("R/*", recursive = T, force = T)
}
QuickUpdate()
#Move_struct_R(struct_R)
#vignette(package = "DSIWastewater")
#vignette("vignettes_DHSTopLevelAnalysis_Outlier")
