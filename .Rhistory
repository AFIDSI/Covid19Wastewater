dplyr::summarise(across(everything(), function(x) sum(is.na(x))))
model_data <- base_df%>%
filter(if_all(everything(), is.finite))
library(rsample)
library(purrr)
library(partykit)
library(sandwich)
MSE <- function(true, pred){
mean((true - pred)**2, na.rm = TRUE)
}
train_df <- model_data%>%
slice_sample(prop = 0.70)
test_df  <- model_data%>%
anti_join(train_df)
form <- conf_case ~ N1 + N2 | . - N1 - N2
#form <- conf_case ~ N1 | . - N1 - N2
forest_model <- random_linear_forest(train_df, 500,
form, max_depth = 3)
#benchmark(random_linear_forest(train_df, 5,
#                                     form, maxdepth = 3),
#               times = 10)
#library( rbenchmark)
MSE(predict(forest_model, test_df), test_df$conf_case)
#look into pred being conservitive
test_df%>%
ggplot(aes(x = conf_case,
y = conf_case - predict(forest_model, test_df)))+
geom_point()
#get better viz tools
#compare tree vs linear tree
#viz 1 tree -> viz forest
#forest viz
forest_model@models[[1]]
library(plyr)
gen_INCMSE(forest_model)
lm_model <- lm(conf_case ~ N1 + N2, data = train_df)
MSE(predict(lm_model, test_df), test_df$conf_case)
test_df%>%
ggplot(aes(x = conf_case, y = conf_case - predict(lm_model, test_df)))+
geom_point()
temp <- OOB_MSE_num_trees(forest_model)
temp%>%
ggplot(aes(y = model_MSE, x = num_tree))+
geom_line()
library(plotly)
plot_lmTree <- function(lmtree_obj){
plot(lmtree_obj)
nodes <- as.character(c(3:4,6:7))
point_plot <- data.frame()
mx_model <- data.frame()
for(i in 1:length(nodes)){
indx <- nodes[i]
new_data <- data_party(lmtree_obj[[as.numeric(indx)]])%>%
mutate(model = indx)
###
new_model <- coef(lmtree_obj[[as.numeric(indx)]])%>%
as.data.frame()%>%
transpose()%>%
as.data.frame()
names(new_model) <- c("intercept", "N1", "N2")
mx_model <- new_model%>%
mutate(model = indx)%>%
#mutate(intercept = intercept + mean(new_data$N2, na.rm = TRUE)* N2)%>%
bind_rows(mx_model)
####
point_plot <- new_data%>%
#mutate(conf_case = conf_case - N2 * new_model$N2)%>%
bind_rows(point_plot)
}
tree_plot <- ggplot() +
geom_point(data = point_plot, aes(x = N1, y = conf_case,
color = model))+
geom_abline(data = mx_model,
aes(intercept = intercept,
slope = N1,
color = model))
return(tree_plot)
}
#ggplotly(plot_lmTree(forest_model@models[[4]]))
lapply(1:5, function(x) ggplotly(plot_lmTree(forest_model@models[[x]])))
library(plotly)
plot_lmTree <- function(lmtree_obj){
plot(lmtree_obj)
nodes <- as.character(c(3:4,6:7))
point_plot <- data.frame()
mx_model <- data.frame()
for(i in 1:length(nodes)){
indx <- nodes[i]
new_data <- data_party(lmtree_obj[[as.numeric(indx)]])%>%
mutate(model = indx)
###
new_model <- coef(lmtree_obj[[as.numeric(indx)]])%>%
as.data.frame()%>%
transpose()%>%
as.data.frame()
names(new_model) <- c("intercept", "N1", "N2")
mx_model <- new_model%>%
mutate(model = indx)%>%
#mutate(intercept = intercept + mean(new_data$N2, na.rm = TRUE)* N2)%>%
bind_rows(mx_model)
####
point_plot <- new_data%>%
mutate(conf_case = conf_case - N2 * new_model$N2)%>%
bind_rows(point_plot)
}
tree_plot <- ggplot() +
geom_point(data = point_plot, aes(x = N1, y = conf_case,
color = model))+
geom_abline(data = mx_model,
aes(intercept = intercept,
slope = N1,
color = model))
return(tree_plot)
}
#ggplotly(plot_lmTree(forest_model@models[[4]]))
lapply(1:5, function(x) ggplotly(plot_lmTree(forest_model@models[[x]])))
lapply(1:5, function(x) ggplotly(plot_lmTree(forest_model@models[[x]])))
plot_lmTree <- function(lmtree_obj){
plot(lmtree_obj)
nodes <- as.character(c(3:4,6:7))
point_plot <- data.frame()
mx_model <- data.frame()
for(i in 1:length(nodes)){
indx <- nodes[i]
new_data <- data_party(lmtree_obj[[as.numeric(indx)]])%>%
mutate(model = indx)
###
new_model <- coef(lmtree_obj[[as.numeric(indx)]])%>%
as.data.frame()%>%
transpose()%>%
as.data.frame()
names(new_model) <- c("intercept", "N1", "N2")
mx_model <- new_model%>%
mutate(model = indx)%>%
#mutate(intercept = intercept + mean(new_data$N2, na.rm = TRUE)* N2)%>%
mutate(N1 = N1 + N2)%>%
bind_rows(mx_model)
####
point_plot <- new_data%>%
#mutate(conf_case = conf_case - N2 * new_model$N2)%>%
bind_rows(point_plot)
}
tree_plot <- ggplot() +
geom_point(data = point_plot, aes(x = N1, y = conf_case,
color = model))+
geom_abline(data = mx_model,
aes(intercept = intercept,
slope = N1,
color = model))
return(tree_plot)
}
lapply(1:5, function(x) ggplotly(plot_lmTree(forest_model@models[[x]])))
tree_plot <- ggplot() +
geom_point(data = point_plot, aes(x = N1 + N2, y = conf_case,
color = model))+
geom_abline(data = mx_model,
aes(intercept = intercept,
slope = N1,
color = model))
plot_lmTree <- function(lmtree_obj){
plot(lmtree_obj)
nodes <- as.character(c(3:4,6:7))
point_plot <- data.frame()
mx_model <- data.frame()
for(i in 1:length(nodes)){
indx <- nodes[i]
new_data <- data_party(lmtree_obj[[as.numeric(indx)]])%>%
mutate(model = indx)
###
new_model <- coef(lmtree_obj[[as.numeric(indx)]])%>%
as.data.frame()%>%
transpose()%>%
as.data.frame()
names(new_model) <- c("intercept", "N1", "N2")
mx_model <- new_model%>%
mutate(model = indx)%>%
#mutate(intercept = intercept + mean(new_data$N2, na.rm = TRUE)* N2)%>%
mutate(N1 = N1 + N2)%>%
bind_rows(mx_model)
####
point_plot <- new_data%>%
#mutate(conf_case = conf_case - N2 * new_model$N2)%>%
bind_rows(point_plot)
}
tree_plot <- ggplot() +
geom_point(data = point_plot, aes(x = N1 + N2, y = conf_case,
color = model))+
geom_abline(data = mx_model,
aes(intercept = intercept,
slope = N1,
color = model))
return(tree_plot)
}
plot_lmTree <- function(lmtree_obj){
plot(lmtree_obj)
nodes <- as.character(c(3:4,6:7))
point_plot <- data.frame()
mx_model <- data.frame()
for(i in 1:length(nodes)){
indx <- nodes[i]
new_data <- data_party(lmtree_obj[[as.numeric(indx)]])%>%
mutate(model = indx)
###
new_model <- coef(lmtree_obj[[as.numeric(indx)]])%>%
as.data.frame()%>%
transpose()%>%
as.data.frame()
names(new_model) <- c("intercept", "N1", "N2")
mx_model <- new_model%>%
mutate(model = indx)%>%
#mutate(intercept = intercept + mean(new_data$N2, na.rm = TRUE)* N2)%>%
#mutate(N1 = N1 + N2)%>%
bind_rows(mx_model)
####
point_plot <- new_data%>%
#mutate(conf_case = conf_case - N2 * new_model$N2)%>%
bind_rows(point_plot)
}
tree_plot <- ggplot() +
geom_point(data = point_plot, aes(x = N1 + N2, y = conf_case,
color = model))+
geom_abline(data = mx_model,
aes(intercept = intercept,
slope = N1 + N2,
color = model))
return(tree_plot)
}
lapply(1:5, function(x) ggplotly(plot_lmTree(forest_model@models[[x]])))
plot_lmTree <- function(lmtree_obj){
plot(lmtree_obj)
nodes <- as.character(c(3:4,6:7))
point_plot <- data.frame()
mx_model <- data.frame()
for(i in 1:length(nodes)){
indx <- nodes[i]
new_data <- data_party(lmtree_obj[[as.numeric(indx)]])%>%
mutate(model = indx)
###
new_model <- coef(lmtree_obj[[as.numeric(indx)]])%>%
as.data.frame()%>%
transpose()%>%
as.data.frame()
names(new_model) <- c("intercept", "N1", "N2")
mx_model <- new_model%>%
mutate(model = indx)%>%
#mutate(intercept = intercept + mean(new_data$N2, na.rm = TRUE)* N2)%>%
mutate(N1 = N1 + N2)%>%
bind_rows(mx_model)
####
point_plot <- new_data%>%
#mutate(conf_case = conf_case - N2 * new_model$N2)%>%
bind_rows(point_plot)
}
tree_plot <- ggplot() +
geom_point(data = point_plot, aes(x = N1, y = conf_case,
color = model))+
geom_abline(data = mx_model,
aes(intercept = intercept,
slope = N1,
color = model))
return(tree_plot)
}
lapply(1:5, function(x) ggplotly(plot_lmTree(forest_model@models[[x]])))
plot_lmTree <- function(lmtree_obj){
plot(lmtree_obj)
nodes <- as.character(c(3:4,6:7))
point_plot <- data.frame()
mx_model <- data.frame()
for(i in 1:length(nodes)){
indx <- nodes[i]
new_data <- data_party(lmtree_obj[[as.numeric(indx)]])%>%
mutate(model = indx)
###
new_model <- coef(lmtree_obj[[as.numeric(indx)]])%>%
as.data.frame()%>%
transpose()%>%
as.data.frame()
names(new_model) <- c("intercept", "N1", "N2")
mx_model <- new_model%>%
mutate(model = indx)%>%
mutate(N1 = N1 + N2)%>%
bind_rows(mx_model)
####
point_plot <- new_data%>%
mutate(conf_case = conf_case - N2 * new_model$N2)%>%
bind_rows(point_plot)
}
tree_plot <- ggplot() +
geom_point(data = point_plot, aes(x = N1, y = conf_case,
color = model))+
geom_abline(data = mx_model,
aes(intercept = intercept,
slope = N1,
color = model))
return(tree_plot)
}
lapply(1:5, function(x) ggplotly(plot_lmTree(forest_model@models[[x]])))
plot_lmTree <- function(lmtree_obj){
plot(lmtree_obj)
nodes <- as.character(c(3:4,6:7))
point_plot <- data.frame()
mx_model <- data.frame()
for(i in 1:length(nodes)){
indx <- nodes[i]
new_data <- data_party(lmtree_obj[[as.numeric(indx)]])%>%
mutate(model = indx)
###
new_model <- coef(lmtree_obj[[as.numeric(indx)]])%>%
as.data.frame()%>%
transpose()%>%
as.data.frame()
names(new_model) <- c("intercept", "N1", "N2")
mx_model <- new_model%>%
mutate(model = indx)%>%
bind_rows(mx_model)
####
point_plot <- new_data%>%
mutate(conf_case = conf_case - N2 * new_model$N2)%>%
bind_rows(point_plot)
}
tree_plot <- ggplot() +
geom_point(data = point_plot, aes(x = N1, y = conf_case,
color = model))+
geom_abline(data = mx_model,
aes(intercept = intercept,
slope = N1,
color = model))
return(tree_plot)
}
lapply(1:5, function(x) ggplotly(plot_lmTree(forest_model@models[[x]])))
library(plotly)
plot_lmTree <- function(lmtree_obj){
plot(lmtree_obj)
nodes <- as.character(c(3:4,6:7))
point_plot <- data.frame()
mx_model <- data.frame()
for(i in 1:length(nodes)){
indx <- nodes[i]
new_data <- data_party(lmtree_obj[[as.numeric(indx)]])%>%
mutate(model = indx)
###
new_model <- coef(lmtree_obj[[as.numeric(indx)]])%>%
as.data.frame()%>%
transpose()%>%
as.data.frame()
names(new_model) <- c("intercept", "N1", "N2")
mx_model <- new_model%>%
mutate(model = indx)%>%
mutate(intercept = intercept + mean(new_data$N2, na.rm = TRUE)* N2)%>%
bind_rows(mx_model)
####
point_plot <- new_data%>%
#mutate(conf_case = conf_case - N2 * new_model$N2)%>%
bind_rows(point_plot)
}
tree_plot <- ggplot() +
geom_point(data = point_plot, aes(x = N1, y = conf_case,
color = model))+
geom_abline(data = mx_model,
aes(intercept = intercept,
slope = N1,
color = model))
return(tree_plot)
}
lapply(1:5, function(x) ggplotly(plot_lmTree(forest_model@models[[x]])))
#ggplotly(plot_lmTree(forest_model@models[[4]]))
?M5P
??M5P
library(plotly)
plot_lmTree <- function(lmtree_obj){
plot(lmtree_obj)
nodes <- as.character(c(3:4,6:7))
point_plot <- data.frame()
mx_model <- data.frame()
for(i in 1:length(nodes)){
indx <- nodes[i]
new_data <- data_party(lmtree_obj[[as.numeric(indx)]])%>%
mutate(model = indx)
###
new_model <- coef(lmtree_obj[[as.numeric(indx)]])%>%
as.data.frame()%>%
transpose()%>%
as.data.frame()
names(new_model) <- c("intercept", "N1", "N2")
mx_model <- new_model%>%
mutate(model = indx)%>%
#mutate(intercept = intercept + mean(new_data$N2, na.rm = TRUE)* N2)%>%
bind_rows(mx_model)
####
point_plot <- new_data%>%
bind_rows(point_plot)
}
tree_plot <- ggplot() +
geom_point(data = point_plot, aes(x = N1, y = conf_case,
color = model))+
geom_abline(data = mx_model,
aes(intercept = intercept,
slope = N1,
color = model))
return(tree_plot)
}
lapply(1:5, function(x) ggplotly(plot_lmTree(forest_model@models[[x]])))
#ggplotly(plot_lmTree(forest_model@models[[4]]))
library(plotly)
plot_lmTree <- function(lmtree_obj){
plot(lmtree_obj)
nodes <- as.character(c(3:4,6:7))
point_plot <- data.frame()
mx_model <- data.frame()
for(i in 1:length(nodes)){
indx <- nodes[i]
new_data <- data_party(lmtree_obj[[as.numeric(indx)]])%>%
mutate(model = indx)
###
new_model <- coef(lmtree_obj[[as.numeric(indx)]])%>%
as.data.frame()%>%
transpose()%>%
as.data.frame()
names(new_model) <- c("intercept", "N1", "N2")
mx_model <- new_model%>%
mutate(model = indx)%>%
mutate(intercept = intercept + mean(new_data$N2, na.rm = TRUE)* N2)%>%
bind_rows(mx_model)
####
point_plot <- new_data%>%
bind_rows(point_plot)
}
tree_plot <- ggplot() +
geom_point(data = point_plot, aes(x = N1, y = conf_case,
color = model))+
geom_abline(data = mx_model,
aes(intercept = intercept,
slope = N1,
color = model))
return(tree_plot)
}
lapply(1:5, function(x) ggplotly(plot_lmTree(forest_model@models[[x]])))
#ggplotly(plot_lmTree(forest_model@models[[4]]))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
install(quick=FALSE)
library(devtools)
install(quick=FALSE)
library(devtools)
Move_struct_R <- function(start){
unlink("R", recursive = T, force = T)
dir.create("R")
to_move_files <- list.files(path = start, recursive = TRUE)
for(file in to_move_files){
file_type = strsplit(file, "/")[[1]]
if(file_type[1] == "meta"){
file.copy(from = paste0(start,"/",file), "R")
}else{
file.copy(from = paste0(start,"/",file),
to = paste0("R/",file_type[1],"--",file_type[2]))
}
}
}
QuickUpdate <- function(){
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
Move_struct_R("struct_R")
document()
build(path = ".", vignettes = FALSE)
install(quick=FALSE)
}
LongUpdate <- function(){
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
Move_struct_R("struct_R")
build_vignettes(quiet=FALSE)
dir.create("inst/doc", recursive = TRUE)
file.copy(dir("doc", full.names=TRUE), "inst/doc", overwrite=TRUE)
file.remove("DSIWastewater_0.2.01.tar.gz")
QuickUpdate()
check(args = c("--no-tests"), vignettes = FALSE)
test()
unlink("R/*", recursive = T, force = T)
}
QuickUpdate()
library(devtools)
Move_struct_R <- function(start){
unlink("R", recursive = T, force = T)
dir.create("R")
to_move_files <- list.files(path = start, recursive = TRUE)
for(file in to_move_files){
file_type = strsplit(file, "/")[[1]]
if(file_type[1] == "meta"){
file.copy(from = paste0(start,"/",file), "R")
}else{
file.copy(from = paste0(start,"/",file),
to = paste0("R/",file_type[1],"--",file_type[2]))
}
}
}
QuickUpdate <- function(){
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
Move_struct_R("struct_R")
document()
build(path = ".", vignettes = FALSE)
install(quick=FALSE)
}
LongUpdate <- function(){
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
Move_struct_R("struct_R")
build_vignettes(quiet=FALSE)
dir.create("inst/doc", recursive = TRUE)
file.copy(dir("doc", full.names=TRUE), "inst/doc", overwrite=TRUE)
file.remove("DSIWastewater_0.2.01.tar.gz")
QuickUpdate()
check(args = c("--no-tests"), vignettes = FALSE)
test()
unlink("R/*", recursive = T, force = T)
}
QuickUpdate()
