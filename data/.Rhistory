vignette(package = "DSIWastewater")
help(package = "DSIWastewater")
library(testthat)
#'
#'
#' @param df data frame object from data/wastewater_data.rda
#'
#' @return data frame
#' @export
#'
#' @examples
#' data(WasteWater_data, package = "DSIWastewater")
#' buildWasteAnalysisDF(WasteWater_data)
buildWasteAnalysisDF <- function(df){
## format data as DHS code expects
### Note: Replacement small values with LOD/2 (as per 5/20/2022 discussion w/DHS)
df <- df %>%
mutate(n1_sars_cov2_lod = gsub(" ", "",tolower(n1_sars_cov2_lod)) == "yes",
n2_sars_cov2_lod = gsub(" ", "",tolower(n2_sars_cov2_lod)) == "yes",
n1_sars_cov2_conc = ifelse(n1_sars_cov2_lod,
as.numeric(n1_lod)/2, n1_sars_cov2_conc),
n2_sars_cov2_conc = ifelse(n2_sars_cov2_lod,
as.numeric(n2_lod)/2, n2_sars_cov2_conc),
population_served = as.numeric(gsub(",", "",population_served)))%>%
select(
wwtp_name,sample_collect_date,population_served,  ## site data
n1_sars_cov2_conc, n2_sars_cov2_conc,             ## N1, N2 measurement
average_flow_rate                                 ## sample covariates
) %>%
rename(WWTP = wwtp_name, date = sample_collect_date) %>%
mutate(date = as.Date(date,format="%m/%d/%Y"))
## dependent regression variable: log of normalized average SARS-COV-2 level
workset4 <- df %>%
filter(average_flow_rate != "NA") %>%
mutate (geoMean = sqrt(n1_sars_cov2_conc*n2_sars_cov2_conc)) %>%
mutate(sars_cov2_adj_load_log10 = log10(
geoMean*average_flow_rate/population_served)
)
## filter out sites with too few measurements
##  and sort by date;
workset4 <- workset4 %>%
group_by(WWTP) %>%
mutate(n = n()) %>%
arrange(date, .by_group = TRUE) %>%
ungroup()
return(workset4)
}
#' Prep case data into right format
#'
#' @param df case dataframe have columns: Date, population_served, FirstConfirmed
#'
#' @return DF with a 7 day rolling sum and a population weighted case column
#' @export
#'
#' @examples
#' data(Case_data, package = "DSIWastewater")
#' buildCaseAnalysisDF(Case_data)
buildCaseAnalysisDF <- function(df){
CaseProcess <- df%>%
#sort data to make sure the rolling sum func does not fail to sum correctly
arrange(Site, date)%>%
group_by(Site)%>%
#Create case data norm by the population
mutate(FirstConfirmed.Per100K = (FirstConfirmed * 100000) / population_served,
#get rolling sum of the last 6 days filling missing data with NAs
pastwk.sum.casesperday.Per100K =
rollsumr(FirstConfirmed.Per100K, 7, fill=NA))
return(CaseProcess)
}
load("~/Desktop/Wastewater Analysis/DSIWastewater/data/Case_data.RData")
load("~/Desktop/Wastewater Analysis/DSIWastewater/data/example_data.RData")
load("~/Desktop/Wastewater Analysis/DSIWastewater/data/HFGCase_data.RData")
load("/Users/kyllan/Desktop/COVIDproject/DSIWastewater/data/Case_data.RData")
View(Case_data)
load("/Users/kyllan/Desktop/COVIDproject/DSIWastewater/data/example_data.RData")
View(example_data)
load("/Users/kyllan/Desktop/COVIDproject/DSIWastewater/data/InterceptorCase_data.RData")
View(InterceptorCase_data)
load("/Users/kyllan/Desktop/COVIDproject/DSIWastewater/data/WasteWater_data.RData")
View(WasteWater_data)
remove.packages("DSIWastewater")
devtools::install_github(
"AFIDSI/DSIWastewater",
auth_token = "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"
)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(zoo)
#######################Peters code
data(Case_data, package = "DSIWastewater")
covid_by_sewershed = Case_data%>%
rename(WWTP = Site , cases = FirstConfirmed)%>%
filter(WWTP == "Madison")%>%
mutate(cases_per_100k = (cases /380000)*1e5,
date = as.Date(date))
length(unique(covid_by_sewershed$WWTP)) # 68 unique sewersheds
# Create rolling means of 7 days (day i to day i-6) and variables for de-trending (linked ratio and first difference)
covid_by_sewershed_ordered= covid_by_sewershed[order(covid_by_sewershed$WWTP,
covid_by_sewershed$date),] %>%
group_by(WWTP) %>%
mutate(pastwk.avg.casesperday = rollsumr(cases, 7, fill=NA)/7,
pastwk.sum.casesperday = rollsumr(cases, 7, fill=NA)
)
# Only consider cases after February 1, 2021
# Note that Jan 25 2021, lab methods switched at state lab singleplex to multiplex (current)
postJAN_cases = covid_by_sewershed_ordered[which(covid_by_sewershed_ordered$date >= as.Date("2021-02-01")),]
# Create variant time period indicator
postJAN_cases = postJAN_cases %>%
mutate(variant = case_when(date < as.Date("2021-06-20") ~ "Alpha/wt",
# Delta > 50% starting epi week 25 (June 20,2021) - WSLH
date > as.Date("2021-06-19") & date < as.Date("2021-12-19") ~ "Delta",
# Omicron > 50% starting epi week 51 (December 19, 2021) - WSLH
date > as.Date("2021-12-18") ~ "Omicron"))%>%
mutate(mean_pop_served = 380000)%>%
mutate(pastwk.avg.casesperday.per100k = (pastwk.avg.casesperday/mean_pop_served)*100000,
pastwk.sum.casesperday.per100k = (pastwk.sum.casesperday/mean_pop_served)*100000)
###Marlin code
#load data
data(Case_data, package = "DSIWastewater")
CaseProcess <- Case_data%>%
filter(Site == "Madison")%>%
mutate(date = as.Date(date))%>%
filter(date  >= as.Date("2021-02-01"))%>%
mutate(Population = 380000)%>%
arrange(date)%>%
mutate(FirstConfirmed.Per100K = (FirstConfirmed * 100000) / Population)%>%
mutate(pastwk.sum.casesperday.Per100K =
rollsumr(FirstConfirmed.Per100K, 7, fill=NA))
##############
#Conclusion: basically the same
head(postJAN_cases)
head(CaseProcess)
#######################Peters code
wwtp_characteristics = postJAN_cases %>%
distinct(WWTP)
#################################################################################################################################################
#
# FOR LOOP FOR CASE DATA REGRESSION SLOPES
#
#################################################################################################################################################
# FOR SEWERSHED CASES --------------------------------------------------------------------------------------------------------------
reg_estimates = as.data.frame(matrix(ncol=4, nrow=0))
colnames(reg_estimates) = c("WWTP", "date", "cases_days_elapsed", "cases_per_100k_slope")
distinct_wwtps = wwtp_characteristics %>%
distinct(WWTP)
# Define window to calculate regression (define as number - 1)
# (i.e. for 5 day window, S = 4)
S = 6
for (i in 1:nrow(distinct_wwtps)){
print(paste(distinct_wwtps[i,1]))
ww.x = postJAN_cases %>%
filter(WWTP==paste(distinct_wwtps[i,1]))
for (k in 1:(nrow(ww.x) - S)){
ww.x.subset = ww.x[c(k:(k+S)),]
lm.subset = lm(cases_per_100k ~ date, # date included works same as days_since_last_sample
data = ww.x.subset)
summary(lm.subset)
# Extract row to bind with workset
ww.x.tobind = ww.x.subset %>%
filter(date == max(date)) %>%
select(WWTP, date) %>%
mutate(
cases_days_elapsed = as.numeric(max(ww.x.subset$date) - min(ww.x.subset$date)),
cases_per_100k_slope = summary(lm.subset)$coefficients[2,1])
# Join with full set of reg estimates
reg_estimates = rbind(reg_estimates, ww.x.tobind)
}
}
install.packages(c("desc", "future.apply", "gert", "gh", "gitcreds", "httpuv", "Matrix", "openssl", "tidyquant", "xfun", "zip"))
install.packages(c("desc", "future.apply", "gert", "gh", "gitcreds", "httpuv", "Matrix", "openssl", "tidyquant", "xfun", "zip"))
install.packages(c("desc", "future.apply", "gert", "gh", "gitcreds", "httpuv", "Matrix", "openssl", "tidyquant", "xfun", "zip"))
install.packages(c("desc", "future.apply", "gert", "gh", "gitcreds", "httpuv", "Matrix", "openssl", "tidyquant", "xfun", "zip"))
